<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet xmlns:err="http://www.w3.org/2005/xqt-errors" xmlns:eusr="urn:fdc:peppol:end-user-statistics-report:1.1" xmlns:f="#functions" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:schxslt="http://dmaus.name/ns/2023/schxslt" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="3.0" expand-text="false"><xsl:variable name="schxslt:phase" as="xs:string" select="'#ALL'"/><xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="f:schemeAndValue" as="xs:string">
    <xsl:param name="node"/>
    <xsl:variable name="count" select="count($node)" as="xs:integer"/>
    <xsl:choose>
      <xsl:when test="$count &gt;= 1">
        <!--
          As there are additional checks that make sure, that each key is only needed once,
          it is safe for us to only take the first element only
        -->
        <!-- <@schemeID>::<value> -->
        <xsl:value-of select="concat(normalize-space($node[1]/@schemeID),'::',normalize-space($node[1]/text()))"/> 
      </xsl:when>
      <xsl:otherwise>
        <!-- empty string -->
        <xsl:text/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function><xsl:key xmlns="http://purl.oclc.org/dsdl/schematron" name="key-dtpr" match="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerDT-PR']" use="concat (f:schemeAndValue(eusr:Key[normalize-space(@metaSchemeID) = 'DT']),'::',                         f:schemeAndValue(eusr:Key[normalize-space(@metaSchemeID) = 'PR']))"/><xsl:key xmlns="http://purl.oclc.org/dsdl/schematron" name="key-dtpreuc" match="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerDT-PR-EUC']" use="concat (f:schemeAndValue(eusr:Key[normalize-space(@metaSchemeID) = 'DT']),'::',                         f:schemeAndValue(eusr:Key[normalize-space(@metaSchemeID) = 'PR']),'::',                         f:schemeAndValue(eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry']))"/><xsl:key xmlns="http://purl.oclc.org/dsdl/schematron" name="key-dteuc" match="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerDT-EUC']" use="concat (f:schemeAndValue(eusr:Key[normalize-space(@metaSchemeID) = 'DT']),'::',                         f:schemeAndValue(eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry']))"/><xsl:key xmlns="http://purl.oclc.org/dsdl/schematron" name="key-euc" match="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerEUC']" use="f:schemeAndValue(eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry'])"/><xsl:mode name="group.d2e47" on-no-match="shallow-skip" streamable="false"/><xsl:template match="*" mode="group.d2e47" priority="-10"><xsl:apply-templates select="@*" mode="#current"/><xsl:apply-templates select="node()" mode="#current"/></xsl:template><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="cl_iso3166" select="' 1A AD AE AF AG AI AL AM AO AQ AR AS AT AU AW AX AZ BA BB BD BE BF BG BH BI BJ BL BM BN BO BQ BR BS BT BV BW BY BZ CA CC CD CF CG CH CI CK CL CM CN CO CR CU CV CW CX CY CZ DE DJ DK DM DO DZ EC EE EG EH EL ER ES ET FI FJ FK FM FO FR GA GB GD GE GF GG GH GI GL GM GN GP GQ GR GS GT GU GW GY HK HM HN HR HT HU ID IE IL IM IN IO IQ IR IS IT JE JM JO JP KE KG KH KI KM KN KP KR KW KY KZ LA LB LC LI LK LR LS LT LU LV LY MA MC MD ME MF MG MH MK ML MM MN MO MP MQ MR MS MT MU MV MW MX MY MZ NA NC NE NF NG NI NL NO NP NR NU NZ OM PA PE PF PG PH PK PL PM PN PR PS PT PW PY QA RE RO RS RU RW SA SB SC SD SE SG SH SI SJ SK SL SM SN SO SR SS ST SV SX SY SZ TC TD TF TG TH TJ TK TL TM TN TO TR TT TV TW TZ UA UG UM US UY UZ VA VC VE VG VI VN VU WF WS XI XK YE YT ZA ZM ZW '"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="cl_spidtype" select="' CertSubjectCN '"/><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/eusr:EndUserStatisticsReport" mode="group.d2e47" priority="7"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e47' = $schxslt:pattern"><svrl:suppressed-rule context="/eusr:EndUserStatisticsReport"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/eusr:EndUserStatisticsReport"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:variable name="total" select="xs:integer(eusr:FullSet/eusr:SendingEndUsers) + xs:integer(eusr:FullSet/eusr:ReceivingEndUsers)"/><xsl:variable name="empty" select="$total = 0"/><xsl:if test="not(normalize-space(eusr:CustomizationID) = 'urn:fdc:peppol.eu:edec:trns:end-user-statistics-report:1.1')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-01" test="normalize-space(eusr:CustomizationID) = 'urn:fdc:peppol.eu:edec:trns:end-user-statistics-report:1.1'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-01] The customization ID MUST use the value 'urn:fdc:peppol.eu:edec:trns:end-user-statistics-report:1.1'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(normalize-space(eusr:ProfileID) = 'urn:fdc:peppol.eu:edec:bis:reporting:1.0')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-02" test="normalize-space(eusr:ProfileID) = 'urn:fdc:peppol.eu:edec:bis:reporting:1.0'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-02] The profile ID MUST use the value 'urn:fdc:peppol.eu:edec:bis:reporting:1.0'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($empty or max(eusr:Subset/eusr:SendingEndUsers) le xs:integer(eusr:FullSet/eusr:SendingEndUsers))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-03" test="$empty or max(eusr:Subset/eusr:SendingEndUsers) le xs:integer(eusr:FullSet/eusr:SendingEndUsers)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-03] The maximum of all subsets of SendingEndUsers (<xsl:value-of select="max(eusr:Subset/eusr:SendingEndUsers)"/>) MUST be lower or equal to FullSet/SendingEndUsers (<xsl:value-of select="xs:integer(eusr:FullSet/eusr:SendingEndUsers)"/>)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($empty or max(eusr:Subset/eusr:ReceivingEndUsers) le xs:integer(eusr:FullSet/eusr:ReceivingEndUsers))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-04" test="$empty or max(eusr:Subset/eusr:ReceivingEndUsers) le xs:integer(eusr:FullSet/eusr:ReceivingEndUsers)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-04] The maximum of all subsets of ReceivingEndUsers (<xsl:value-of select="max(eusr:Subset/eusr:ReceivingEndUsers)"/>) MUST be lower or equal to FullSet/ReceivingEndUsers (<xsl:value-of select="xs:integer(eusr:FullSet/eusr:ReceivingEndUsers)"/>)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($empty or max(eusr:Subset/eusr:SendingOrReceivingEndUsers) le xs:integer(eusr:FullSet/eusr:SendingOrReceivingEndUsers))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-22" test="$empty or max(eusr:Subset/eusr:SendingOrReceivingEndUsers) le xs:integer(eusr:FullSet/eusr:SendingOrReceivingEndUsers)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-22] The maximum of all subsets of SendingOrReceivingEndUsers (<xsl:value-of select="max(eusr:Subset/eusr:SendingOrReceivingEndUsers)"/>) MUST be lower or equal to FullSet/SendingOrReceivingEndUsers (<xsl:value-of select="xs:integer(eusr:FullSet/eusr:SendingOrReceivingEndUsers)"/>)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(xs:integer(eusr:FullSet/eusr:SendingOrReceivingEndUsers) &lt;= $total)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-19" test="xs:integer(eusr:FullSet/eusr:SendingOrReceivingEndUsers) &lt;= $total" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-19] The number of SendingOrReceivingEndUsers (<xsl:value-of select="eusr:FullSet/eusr:SendingOrReceivingEndUsers"/>) MUST be lower or equal to the sum of the SendingEndUsers and ReceivingEndUsers (<xsl:value-of select="$total"/>)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(xs:integer(eusr:FullSet/eusr:SendingOrReceivingEndUsers) &gt;= xs:integer(eusr:FullSet/eusr:SendingEndUsers))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-20" test="xs:integer(eusr:FullSet/eusr:SendingOrReceivingEndUsers) &gt;= xs:integer(eusr:FullSet/eusr:SendingEndUsers)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-20] The number of SendingOrReceivingEndUsers (<xsl:value-of select="eusr:FullSet/eusr:SendingOrReceivingEndUsers"/>) MUST be greater or equal to the number of SendingEndUsers (<xsl:value-of select="eusr:FullSet/eusr:SendingEndUsers"/>)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(xs:integer(eusr:FullSet/eusr:SendingOrReceivingEndUsers) &gt;= xs:integer(eusr:FullSet/eusr:ReceivingEndUsers))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-21" test="xs:integer(eusr:FullSet/eusr:SendingOrReceivingEndUsers) &gt;= xs:integer(eusr:FullSet/eusr:ReceivingEndUsers)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-21] The number of SendingOrReceivingEndUsers (<xsl:value-of select="eusr:FullSet/eusr:SendingOrReceivingEndUsers"/>) MUST be greater or equal to the number of ReceivingEndUsers (<xsl:value-of select="eusr:FullSet/eusr:ReceivingEndUsers"/>)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($empty or eusr:Subset[normalize-space(@type) = 'PerDT-PR'])"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-15" test="$empty or eusr:Subset[normalize-space(@type) = 'PerDT-PR']" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-15] At least one subset per 'Dataset Type ID and Process ID' MUST exist</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($empty or eusr:Subset[normalize-space(@type) = 'PerDT-EUC'])"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-37" test="$empty or eusr:Subset[normalize-space(@type) = 'PerDT-EUC']" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-37] At least one subset per 'Dataset Type ID and End User Country' MUST exist</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($empty or eusr:Subset[normalize-space(@type) = 'PerEUC'])"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-39" test="$empty or eusr:Subset[normalize-space(@type) = 'PerEUC']" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-39] At least one subset per 'End User Country' MUST exist</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Subset[normalize-space(@type) !='PerDT-PR' and                                                                      normalize-space(@type) !='PerDT-PR-EUC' and                                                                     normalize-space(@type) !='PerDT-EUC' and                                                                      normalize-space(@type) !='PerEUC']) = 0)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-14" test="count(eusr:Subset[normalize-space(@type) !='PerDT-PR' and                                                                      normalize-space(@type) !='PerDT-PR-EUC' and                                                                     normalize-space(@type) !='PerDT-EUC' and                                                                      normalize-space(@type) !='PerEUC']) = 0" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-14] Only allowed subset types MUST be used.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(every $st in (eusr:Subset) satisfies                                                         xs:integer($st/eusr:SendingOrReceivingEndUsers) &lt;= xs:integer($st/eusr:SendingEndUsers + $st/eusr:ReceivingEndUsers))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-33" test="every $st in (eusr:Subset) satisfies                                                         xs:integer($st/eusr:SendingOrReceivingEndUsers) &lt;= xs:integer($st/eusr:SendingEndUsers + $st/eusr:ReceivingEndUsers)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-33] The number of each Subset/SendingOrReceivingEndUsers MUST be lower or equal to the sum of the Subset/SendingEndUsers plus Subset/ReceivingEndUsers</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(every $st in (eusr:Subset) satisfies                                                         xs:integer($st/eusr:SendingOrReceivingEndUsers) &gt;= xs:integer($st/eusr:SendingEndUsers))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-34" test="every $st in (eusr:Subset) satisfies                                                         xs:integer($st/eusr:SendingOrReceivingEndUsers) &gt;= xs:integer($st/eusr:SendingEndUsers)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-34] The number of each Subset/SendingOrReceivingEndUsers MUST be greater or equal to the number of Subset/SendingEndUsers (<xsl:value-of select="eusr:Subset/eusr:SendingEndUsers"/>)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(every $st in (eusr:Subset) satisfies                                                         xs:integer($st/eusr:SendingOrReceivingEndUsers) &gt;= xs:integer($st/eusr:ReceivingEndUsers))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-35" test="every $st in (eusr:Subset) satisfies                                                         xs:integer($st/eusr:SendingOrReceivingEndUsers) &gt;= xs:integer($st/eusr:ReceivingEndUsers)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-35] The number of each Subset/SendingOrReceivingEndUsers MUST be greater or equal to the number of Subset/ReceivingEndUsers (<xsl:value-of select="eusr:Subset/eusr:ReceivingEndUsers"/>)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(every $st in (eusr:Subset) satisfies                                                         xs:integer($st/eusr:SendingOrReceivingEndUsers) &gt; 0)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-36" test="every $st in (eusr:Subset) satisfies                                                         xs:integer($st/eusr:SendingOrReceivingEndUsers) &gt; 0" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-36] The number of each Subset/SendingOrReceivingEndUsers MUST be greater then zero, otherwise it MUST be omitted</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e47', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/eusr:EndUserStatisticsReport/eusr:Header" mode="group.d2e47" priority="6"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e47' = $schxslt:pattern"><svrl:suppressed-rule context="/eusr:EndUserStatisticsReport/eusr:Header"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/eusr:EndUserStatisticsReport/eusr:Header"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(matches(normalize-space(eusr:ReportPeriod/eusr:StartDate), '^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$'))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-16" test="matches(normalize-space(eusr:ReportPeriod/eusr:StartDate), '^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$')" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-16] The reporting period start date (<xsl:value-of select="normalize-space(eusr:ReportPeriod/eusr:StartDate)"/>) MUST NOT contain timezone information</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(matches(normalize-space(eusr:ReportPeriod/eusr:EndDate), '^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$'))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-17" test="matches(normalize-space(eusr:ReportPeriod/eusr:EndDate), '^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$')" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-17] The reporting period end date (<xsl:value-of select="normalize-space(eusr:ReportPeriod/eusr:EndDate)"/>) MUST NOT contain timezone information</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(eusr:ReportPeriod/eusr:EndDate &gt;= eusr:ReportPeriod/eusr:StartDate)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-18" test="eusr:ReportPeriod/eusr:EndDate &gt;= eusr:ReportPeriod/eusr:StartDate" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-18] The report period start date (<xsl:value-of select="normalize-space(eusr:ReportPeriod/eusr:StartDate)"/>) MUST NOT be after the report period end date (<xsl:value-of select="normalize-space(eusr:ReportPeriod/eusr:EndDate)"/>)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e47', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/eusr:EndUserStatisticsReport/eusr:Header/eusr:ReporterID" mode="group.d2e47" priority="5"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e47' = $schxslt:pattern"><svrl:suppressed-rule context="/eusr:EndUserStatisticsReport/eusr:Header/eusr:ReporterID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/eusr:EndUserStatisticsReport/eusr:Header/eusr:ReporterID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(normalize-space(.) != '')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-06" test="normalize-space(.) != ''" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-06] The Reporter ID MUST be present</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(not(contains(normalize-space(@schemeID), ' ')) and                                                   contains($cl_spidtype, concat(' ', normalize-space(@schemeID), ' ')))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-07" test="not(contains(normalize-space(@schemeID), ' ')) and                                                   contains($cl_spidtype, concat(' ', normalize-space(@schemeID), ' '))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-07] The Reporter ID scheme ID (<xsl:value-of select="normalize-space(@schemeID)"/>) MUST be coded according to the code list</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not((@schemeID='CertSubjectCN' and                                                    matches(normalize-space(.), '^P[A-Z]{2}[0-9]{6}$')) or                                                    not(@schemeID='CertSubjectCN'))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-08" test="(@schemeID='CertSubjectCN' and                                                    matches(normalize-space(.), '^P[A-Z]{2}[0-9]{6}$')) or                                                    not(@schemeID='CertSubjectCN')" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-08] The layout of the certificate subject CN (<xsl:value-of select="normalize-space(.)"/>) is not a valid Peppol Seat ID</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e47', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/eusr:EndUserStatisticsReport/eusr:Subset/eusr:Key[normalize-space(@schemeID) = 'EndUserCountry']" mode="group.d2e47" priority="4"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e47' = $schxslt:pattern"><svrl:suppressed-rule context="/eusr:EndUserStatisticsReport/eusr:Subset/eusr:Key[normalize-space(@schemeID) = 'EndUserCountry']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/eusr:EndUserStatisticsReport/eusr:Subset/eusr:Key[normalize-space(@schemeID) = 'EndUserCountry']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(not(contains(normalize-space(.), ' ')) and                                                    contains($cl_iso3166, concat(' ', normalize-space(.), ' ')))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-30" test="not(contains(normalize-space(.), ' ')) and                                                    contains($cl_iso3166, concat(' ', normalize-space(.), ' '))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-30] The country code MUST be coded with ISO code ISO 3166-1 alpha-2. Nevertheless, Greece may use the code 'EL', Kosovo may use the code 'XK' or '1A'.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e47', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerDT-PR']" mode="group.d2e47" priority="3"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e47' = $schxslt:pattern"><svrl:suppressed-rule context="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerDT-PR']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerDT-PR']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:variable name="name" select="'The subset per Dataset Type ID and Process ID'"/><xsl:if test="not(every $dt in (eusr:Key[normalize-space(@metaSchemeID) = 'DT']),                                                         $pr in (eusr:Key[normalize-space(@metaSchemeID) = 'PR']) satisfies                                                     count(key('key-dtpr', concat (f:schemeAndValue($dt),'::',                                                                                   f:schemeAndValue($pr)))) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-13" test="every $dt in (eusr:Key[normalize-space(@metaSchemeID) = 'DT']),                                                         $pr in (eusr:Key[normalize-space(@metaSchemeID) = 'PR']) satisfies                                                     count(key('key-dtpr', concat (f:schemeAndValue($dt),'::',                                                                                   f:schemeAndValue($pr)))) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-13] Each combination of 'Dataset Type ID and Process ID' MUST occur only once.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key) = 2)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-09" test="count(eusr:Key) = 2" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-09] <xsl:value-of select="$name"/> MUST have two Key elements</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key[normalize-space(@metaSchemeID) = 'DT']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-10" test="count(eusr:Key[normalize-space(@metaSchemeID) = 'DT']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-10] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'DT'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key[normalize-space(@metaSchemeID) = 'PR']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-11" test="count(eusr:Key[normalize-space(@metaSchemeID) = 'PR']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-11] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'PR'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e47', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerDT-PR-EUC']" mode="group.d2e47" priority="2"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e47' = $schxslt:pattern"><svrl:suppressed-rule context="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerDT-PR-EUC']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerDT-PR-EUC']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:variable name="name" select="'The subset per Dataset Type ID, Process ID and End User Country'"/><xsl:if test="not(every $dt in (eusr:Key[normalize-space(@metaSchemeID) = 'DT']),                                                         $pr in (eusr:Key[normalize-space(@metaSchemeID) = 'PR']),                                                         $euc in (eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry']) satisfies                                                     count(key('key-dtpreuc', concat (f:schemeAndValue($dt),'::',                                                                                      f:schemeAndValue($pr),'::',                                                                                      f:schemeAndValue($euc)))) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-29" test="every $dt in (eusr:Key[normalize-space(@metaSchemeID) = 'DT']),                                                         $pr in (eusr:Key[normalize-space(@metaSchemeID) = 'PR']),                                                         $euc in (eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry']) satisfies                                                     count(key('key-dtpreuc', concat (f:schemeAndValue($dt),'::',                                                                                      f:schemeAndValue($pr),'::',                                                                                      f:schemeAndValue($euc)))) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-29] Each combination of 'Dataset Type ID, Process ID and End User Country' MUST occur only once.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key) = 3)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-23" test="count(eusr:Key) = 3" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-23] <xsl:value-of select="$name"/> MUST have three Key elements</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key[normalize-space(@metaSchemeID) = 'DT']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-24" test="count(eusr:Key[normalize-space(@metaSchemeID) = 'DT']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-24] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'DT'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key[normalize-space(@metaSchemeID) = 'PR']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-25" test="count(eusr:Key[normalize-space(@metaSchemeID) = 'PR']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-25] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'PR'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key[normalize-space(@metaSchemeID) = 'CC']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-26" test="count(eusr:Key[normalize-space(@metaSchemeID) = 'CC']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-26] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'CC'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-27" test="count(eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-27] <xsl:value-of select="$name"/> MUST have one CC Key element with the scheme ID 'EndUserCountry'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e47', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerDT-EUC']" mode="group.d2e47" priority="1"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e47' = $schxslt:pattern"><svrl:suppressed-rule context="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerDT-EUC']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerDT-EUC']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:variable name="name" select="'The subset per Dataset Type ID and End User Country'"/><xsl:if test="not(every $dt in (eusr:Key[normalize-space(@metaSchemeID) = 'DT']),                                                         $euc in (eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry']) satisfies                                                     count(key('key-dteuc', concat (f:schemeAndValue($dt),'::',                                                                                    f:schemeAndValue($euc)))) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-38" test="every $dt in (eusr:Key[normalize-space(@metaSchemeID) = 'DT']),                                                         $euc in (eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry']) satisfies                                                     count(key('key-dteuc', concat (f:schemeAndValue($dt),'::',                                                                                    f:schemeAndValue($euc)))) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-38] Each combination of 'Dataset Type ID and End User Country' MUST occur only once.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key) = 2)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-41" test="count(eusr:Key) = 2" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-41] <xsl:value-of select="$name"/> MUST have two Key elements</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key[normalize-space(@metaSchemeID) = 'DT']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-42" test="count(eusr:Key[normalize-space(@metaSchemeID) = 'DT']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-42] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'DT'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key[normalize-space(@metaSchemeID) = 'CC']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-43" test="count(eusr:Key[normalize-space(@metaSchemeID) = 'CC']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-43] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'CC'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-44" test="count(eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-44] <xsl:value-of select="$name"/> MUST have one CC Key element with the scheme ID 'EndUserCountry'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e47', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerEUC']" mode="group.d2e47" priority="0"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e47' = $schxslt:pattern"><svrl:suppressed-rule context="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerEUC']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/eusr:EndUserStatisticsReport/eusr:Subset[normalize-space(@type) = 'PerEUC']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:variable name="name" select="'The subset per End User Country'"/><xsl:if test="not(every $euc in (eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry']) satisfies                                                     count(key('key-euc', f:schemeAndValue($euc))) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-40" test="every $euc in (eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry']) satisfies                                                     count(key('key-euc', f:schemeAndValue($euc))) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-40] Each 'End User Country' MUST occur only once.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-45" test="count(eusr:Key) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-45] <xsl:value-of select="$name"/> MUST have one Key element</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key[normalize-space(@metaSchemeID) = 'CC']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-46" test="count(eusr:Key[normalize-space(@metaSchemeID) = 'CC']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-46] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'CC'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-EUSR-47" test="count(eusr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'EndUserCountry']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-EUSR-47] <xsl:value-of select="$name"/> MUST have one CC Key element with the scheme ID 'EndUserCountry'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e47', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="root()" as="element(svrl:schematron-output)"><svrl:schematron-output schemaVersion="ISO19757-3" phase="#ALL"><svrl:ns-prefix-in-attribute-values prefix="eusr" uri="urn:fdc:peppol:end-user-statistics-report:1.1"/><svrl:ns-prefix-in-attribute-values prefix="f" uri="#functions"/><!--SchXslt2 Core 1.1--><svrl:active-pattern id="default"><xsl:attribute name="documents" select="document-uri(.)"/></svrl:active-pattern><xsl:apply-templates select="." mode="group.d2e47"/></svrl:schematron-output></xsl:template></xsl:stylesheet>
