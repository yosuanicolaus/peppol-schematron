<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet xmlns:err="http://www.w3.org/2005/xqt-errors" xmlns:f="#functions" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:schxslt="http://dmaus.name/ns/2023/schxslt" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:tsr="urn:fdc:peppol:transaction-statistics-report:1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="3.0" expand-text="false"><xsl:variable name="schxslt:phase" as="xs:string" select="'#ALL'"/><xsl:function xmlns="http://purl.oclc.org/dsdl/schematron" name="f:schemeAndValue" as="xs:string">
    <xsl:param name="node"/>
    <xsl:variable name="count" select="count($node)" as="xs:integer"/>
    <xsl:choose>
      <xsl:when test="$count &gt;= 1">
        <!--
          As there are additional checks that make sure, that each key is only needed once,
          it is safe for us to only take the first element only
        -->
        <!-- <@schemeID>::<value> -->
        <xsl:value-of select="concat(normalize-space($node[1]/@schemeID),'::',normalize-space($node[1]/text()))"/> 
      </xsl:when>
      <xsl:otherwise>
        <!-- empty string -->
        <xsl:text/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function><xsl:key xmlns="http://purl.oclc.org/dsdl/schematron" name="key-tp" match="/tsr:TransactionStatisticsReport/tsr:Subtotal[normalize-space(@type) = 'PerTP']" use="f:schemeAndValue(tsr:Key[normalize-space(@metaSchemeID) = 'TP'])"/><xsl:key xmlns="http://purl.oclc.org/dsdl/schematron" name="key-spdtpr" match="/tsr:TransactionStatisticsReport/tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR']" use="concat (f:schemeAndValue(tsr:Key[normalize-space(@metaSchemeID) = 'SP']),'::',                         f:schemeAndValue(tsr:Key[normalize-space(@metaSchemeID) = 'DT']),'::',                         f:schemeAndValue(tsr:Key[normalize-space(@metaSchemeID) = 'PR']))"/><xsl:key xmlns="http://purl.oclc.org/dsdl/schematron" name="key-spdtprcc" match="/tsr:TransactionStatisticsReport/tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR-CC']" use="concat (f:schemeAndValue(tsr:Key[normalize-space(@metaSchemeID) = 'SP']),'::',                         f:schemeAndValue(tsr:Key[normalize-space(@metaSchemeID) = 'DT']),'::',                         f:schemeAndValue(tsr:Key[normalize-space(@metaSchemeID) = 'PR']),'::',                         f:schemeAndValue(tsr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'SenderCountry']),'::',                         f:schemeAndValue(tsr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'ReceiverCountry']))"/><xsl:mode name="group.d2e45" on-no-match="shallow-skip" streamable="false"/><xsl:template match="*" mode="group.d2e45" priority="-10"><xsl:apply-templates select="@*" mode="#current"/><xsl:apply-templates select="node()" mode="#current"/></xsl:template><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="cl_iso3166" select="' 1A AD AE AF AG AI AL AM AO AQ AR AS AT AU AW AX AZ BA BB BD BE BF BG BH BI BJ BL BM BN BO BQ BR BS BT BV BW BY BZ CA CC CD CF CG CH CI CK CL CM CN CO CR CU CV CW CX CY CZ DE DJ DK DM DO DZ EC EE EG EH EL ER ES ET FI FJ FK FM FO FR GA GB GD GE GF GG GH GI GL GM GN GP GQ GR GS GT GU GW GY HK HM HN HR HT HU ID IE IL IM IN IO IQ IR IS IT JE JM JO JP KE KG KH KI KM KN KP KR KW KY KZ LA LB LC LI LK LR LS LT LU LV LY MA MC MD ME MF MG MH MK ML MM MN MO MP MQ MR MS MT MU MV MW MX MY MZ NA NC NE NF NG NI NL NO NP NR NU NZ OM PA PE PF PG PH PK PL PM PN PR PS PT PW PY QA RE RO RS RU RW SA SB SC SD SE SG SH SI SJ SK SL SM SN SO SR SS ST SV SX SY SZ TC TD TF TG TH TJ TK TL TM TN TO TR TT TV TW TZ UA UG UM US UY UZ VA VC VE VG VI VN VU WF WS XI XK YE YT ZA ZM ZW ZZ '"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="cl_spidtype" select="' CertSubjectCN '"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="cl_subtotalType" select="' PerTP PerSP-DT-PR PerSP-DT-PR-CC '"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="re_seatid" select="'^P[A-Z]{2}[0-9]{6}$'"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="name_tp" select="'Transport Protocol ID'"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="name_spdtpr" select="'Service Provider ID, Dataset Type ID and Process ID'"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="name_spdtprcc" select="'Service Provider ID, Dataset Type ID, Process ID, Sender Country and Receiver Country'"/><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/tsr:TransactionStatisticsReport" mode="group.d2e45" priority="8"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e45' = $schxslt:pattern"><svrl:suppressed-rule context="/tsr:TransactionStatisticsReport"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/tsr:TransactionStatisticsReport"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:variable name="total" select="tsr:Total/tsr:Incoming + tsr:Total/tsr:Outgoing"/><xsl:variable name="empty" select="$total = 0"/><xsl:variable name="cc_empty" select="$empty or tsr:Total/tsr:Incoming = 0"/><xsl:if test="not(normalize-space(tsr:CustomizationID) = 'urn:fdc:peppol.eu:edec:trns:transaction-statistics-reporting:1.0')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-01" test="normalize-space(tsr:CustomizationID) = 'urn:fdc:peppol.eu:edec:trns:transaction-statistics-reporting:1.0'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-01] The customization ID MUST use the value 'urn:fdc:peppol.eu:edec:trns:transaction-statistics-reporting:1.0'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(normalize-space(tsr:ProfileID) = 'urn:fdc:peppol.eu:edec:bis:reporting:1.0')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-02" test="normalize-space(tsr:ProfileID) = 'urn:fdc:peppol.eu:edec:bis:reporting:1.0'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-02] The profile ID MUST use the value 'urn:fdc:peppol.eu:edec:bis:reporting:1.0'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($empty or tsr:Subtotal[normalize-space(@type) = 'PerTP'])"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-03" test="$empty or tsr:Subtotal[normalize-space(@type) = 'PerTP']" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-03] The subtotals per <xsl:value-of select="$name_tp"/> MUST exist</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($empty or sum(tsr:Subtotal[normalize-space(@type) = 'PerTP']/tsr:Incoming) = tsr:Total/tsr:Incoming)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-04" test="$empty or sum(tsr:Subtotal[normalize-space(@type) = 'PerTP']/tsr:Incoming) = tsr:Total/tsr:Incoming" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-04] The sum of all subtotals per <xsl:value-of select="$name_tp"/> incoming MUST match the total incoming count</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($empty or sum(tsr:Subtotal[normalize-space(@type) = 'PerTP']/tsr:Outgoing) = tsr:Total/tsr:Outgoing)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-05" test="$empty or sum(tsr:Subtotal[normalize-space(@type) = 'PerTP']/tsr:Outgoing) = tsr:Total/tsr:Outgoing" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-05] The sum of all subtotals per <xsl:value-of select="$name_tp"/> outgoing MUST match the total outgoing count</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($empty or tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR'])"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-07" test="$empty or tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR']" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-07] The subtotals per <xsl:value-of select="$name_spdtpr"/> MUST exist</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($empty or sum(tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR']/tsr:Incoming) = tsr:Total/tsr:Incoming)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-08" test="$empty or sum(tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR']/tsr:Incoming) = tsr:Total/tsr:Incoming" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-08] The sum of all subtotals per <xsl:value-of select="$name_spdtpr"/> incoming MUST match the total incoming count</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($empty or sum(tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR']/tsr:Outgoing) = tsr:Total/tsr:Outgoing)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-09" test="$empty or sum(tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR']/tsr:Outgoing) = tsr:Total/tsr:Outgoing" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-09] The sum of all subtotals per <xsl:value-of select="$name_spdtpr"/> outgoing MUST match the total outgoing count</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($cc_empty or tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR-CC'])"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-11" test="$cc_empty or tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR-CC']" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-11] The subtotals per <xsl:value-of select="$name_spdtprcc"/> MUST exist</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($cc_empty or sum(tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR-CC']/tsr:Incoming) = tsr:Total/tsr:Incoming)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-12" test="$cc_empty or sum(tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR-CC']/tsr:Incoming) = tsr:Total/tsr:Incoming" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-12] The sum of all subtotals per <xsl:value-of select="$name_spdtprcc"/> incoming MUST match the total incoming count</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Subtotal[normalize-space(@type) !='PerTP' and                                                                      normalize-space(@type) !='PerSP-DT-PR' and                                                                      normalize-space(@type) !='PerSP-DT-PR-CC']) = 0)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-39" test="count(tsr:Subtotal[normalize-space(@type) !='PerTP' and                                                                      normalize-space(@type) !='PerSP-DT-PR' and                                                                      normalize-space(@type) !='PerSP-DT-PR-CC']) = 0" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-39] Only allowed subtotal types MUST be used.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e45', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/tsr:TransactionStatisticsReport/tsr:Header" mode="group.d2e45" priority="7"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e45' = $schxslt:pattern"><svrl:suppressed-rule context="/tsr:TransactionStatisticsReport/tsr:Header"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/tsr:TransactionStatisticsReport/tsr:Header"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(matches(normalize-space(tsr:ReportPeriod/tsr:StartDate), '^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$'))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-40" test="matches(normalize-space(tsr:ReportPeriod/tsr:StartDate), '^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$')" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-40] The report period start date (<xsl:value-of select="normalize-space(tsr:ReportPeriod/tsr:StartDate)"/>) MUST NOT contain timezone information</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(matches(normalize-space(tsr:ReportPeriod/tsr:EndDate), '^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$'))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-41" test="matches(normalize-space(tsr:ReportPeriod/tsr:EndDate), '^[0-9]{4}\-[0-9]{2}\-[0-9]{2}$')" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-41] The report period end date (<xsl:value-of select="normalize-space(tsr:ReportPeriod/tsr:EndDate)"/>) MUST NOT contain timezone information</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(tsr:ReportPeriod/tsr:EndDate &gt;= tsr:ReportPeriod/tsr:StartDate)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-42" test="tsr:ReportPeriod/tsr:EndDate &gt;= tsr:ReportPeriod/tsr:StartDate" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-42] The report period start date (<xsl:value-of select="normalize-space(tsr:ReportPeriod/tsr:StartDate)"/>) MUST NOT be after the report period end date (<xsl:value-of select="normalize-space(tsr:ReportPeriod/tsr:EndDate)"/>)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e45', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/tsr:TransactionStatisticsReport/tsr:Header/tsr:ReporterID" mode="group.d2e45" priority="6"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e45' = $schxslt:pattern"><svrl:suppressed-rule context="/tsr:TransactionStatisticsReport/tsr:Header/tsr:ReporterID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/tsr:TransactionStatisticsReport/tsr:Header/tsr:ReporterID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(normalize-space(.) != '')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-16" test="normalize-space(.) != ''" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-16] The reporter ID MUST be present</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(not(contains(normalize-space(@schemeID), ' ')) and                                               contains($cl_spidtype, concat(' ', normalize-space(@schemeID), ' ')))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-17" test="not(contains(normalize-space(@schemeID), ' ')) and                                               contains($cl_spidtype, concat(' ', normalize-space(@schemeID), ' '))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-17] The Reporter ID scheme (<xsl:value-of select="normalize-space(@schemeID)"/>) MUST be coded according to the code list</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not((@schemeID='CertSubjectCN' and                                                    matches(normalize-space(.), $re_seatid)) or                                                   not(@schemeID='CertSubjectCN'))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-18" test="(@schemeID='CertSubjectCN' and                                                    matches(normalize-space(.), $re_seatid)) or                                                   not(@schemeID='CertSubjectCN')" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-18] The layout of the certificate subject CN (<xsl:value-of select="normalize-space(.)"/>) is not a valid Peppol Seat ID</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e45', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/tsr:TransactionStatisticsReport/tsr:Subtotal/tsr:Key[normalize-space(@schemeID) = 'CertSubjectCN']" mode="group.d2e45" priority="5"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e45' = $schxslt:pattern"><svrl:suppressed-rule context="/tsr:TransactionStatisticsReport/tsr:Subtotal/tsr:Key[normalize-space(@schemeID) = 'CertSubjectCN']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/tsr:TransactionStatisticsReport/tsr:Subtotal/tsr:Key[normalize-space(@schemeID) = 'CertSubjectCN']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(matches(normalize-space(.), $re_seatid))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-19" test="matches(normalize-space(.), $re_seatid)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-19] The layout of the certificate subject CN is not a valid Peppol Seat ID</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e45', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/tsr:TransactionStatisticsReport/tsr:Subtotal/tsr:Key[normalize-space(@schemeID) = 'SenderCountry' or                                                                           normalize-space(@schemeID) = 'ReceiverCountry']" mode="group.d2e45" priority="4"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e45' = $schxslt:pattern"><svrl:suppressed-rule context="/tsr:TransactionStatisticsReport/tsr:Subtotal/tsr:Key[normalize-space(@schemeID) = 'SenderCountry' or                                                                           normalize-space(@schemeID) = 'ReceiverCountry']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/tsr:TransactionStatisticsReport/tsr:Subtotal/tsr:Key[normalize-space(@schemeID) = 'SenderCountry' or                                                                           normalize-space(@schemeID) = 'ReceiverCountry']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(not(contains(normalize-space(.), ' ')) and                                                      contains($cl_iso3166, concat(' ', normalize-space(.), ' ')))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-20" test="not(contains(normalize-space(.), ' ')) and                                                      contains($cl_iso3166, concat(' ', normalize-space(.), ' '))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-20] The country code MUST be coded with ISO code ISO 3166-1 alpha-2. Nevertheless, Greece may use the code 'EL', Kosovo may use the code 'XK' or '1A'.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e45', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/tsr:TransactionStatisticsReport/tsr:Subtotal[normalize-space(@type) = 'PerTP']" mode="group.d2e45" priority="3"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e45' = $schxslt:pattern"><svrl:suppressed-rule context="/tsr:TransactionStatisticsReport/tsr:Subtotal[normalize-space(@type) = 'PerTP']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/tsr:TransactionStatisticsReport/tsr:Subtotal[normalize-space(@type) = 'PerTP']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:variable name="name" select="'The subtotal per Transport Protocol ID'"/><xsl:if test="not(every $tp in (tsr:Key[normalize-space(@metaSchemeID) = 'TP']) satisfies                                                    count(key('key-tp', f:schemeAndValue($tp))) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-06" test="every $tp in (tsr:Key[normalize-space(@metaSchemeID) = 'TP']) satisfies                                                    count(key('key-tp', f:schemeAndValue($tp))) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-06] Each <xsl:value-of select="$name_tp"/> MUST occur only once.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Key) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-21" test="count(tsr:Key) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-21] <xsl:value-of select="$name"/> MUST have one Key element</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Key[normalize-space(@metaSchemeID) = 'TP']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-22" test="count(tsr:Key[normalize-space(@metaSchemeID) = 'TP']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-22] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'TP'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Key[normalize-space(@schemeID) = 'Peppol']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-23" test="count(tsr:Key[normalize-space(@schemeID) = 'Peppol']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-23] <xsl:value-of select="$name"/> MUST have one Key element with the scheme ID 'Peppol'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e45', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/tsr:TransactionStatisticsReport/tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR']" mode="group.d2e45" priority="2"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e45' = $schxslt:pattern"><svrl:suppressed-rule context="/tsr:TransactionStatisticsReport/tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/tsr:TransactionStatisticsReport/tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:variable name="name" select="'The subtotal per Service Provider ID, Dataset Type ID and Process ID'"/><xsl:if test="not(every $sp in (tsr:Key[normalize-space(@metaSchemeID) = 'SP']),                                                        $dt in (tsr:Key[normalize-space(@metaSchemeID) = 'DT']),                                                        $pr in (tsr:Key[normalize-space(@metaSchemeID) = 'PR']) satisfies                                                    count(key('key-spdtpr', concat (f:schemeAndValue($sp),'::',                                                                                    f:schemeAndValue($dt),'::',                                                                                    f:schemeAndValue($pr)))) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-10" test="every $sp in (tsr:Key[normalize-space(@metaSchemeID) = 'SP']),                                                        $dt in (tsr:Key[normalize-space(@metaSchemeID) = 'DT']),                                                        $pr in (tsr:Key[normalize-space(@metaSchemeID) = 'PR']) satisfies                                                    count(key('key-spdtpr', concat (f:schemeAndValue($sp),'::',                                                                                    f:schemeAndValue($dt),'::',                                                                                    f:schemeAndValue($pr)))) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-10] Each combination of <xsl:value-of select="$name_spdtpr"/> MUST occur only once.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Key) = 3)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-24" test="count(tsr:Key) = 3" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-24] <xsl:value-of select="$name"/> MUST have three Key elements</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Key[normalize-space(@metaSchemeID) = 'SP']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-25" test="count(tsr:Key[normalize-space(@metaSchemeID) = 'SP']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-25] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'SP'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Key[normalize-space(@metaSchemeID) = 'DT']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-26" test="count(tsr:Key[normalize-space(@metaSchemeID) = 'DT']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-26] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'DT'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Key[normalize-space(@metaSchemeID) = 'PR']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-27" test="count(tsr:Key[normalize-space(@metaSchemeID) = 'PR']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-27] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'PR'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(every $x in (tsr:Key[normalize-space(@metaSchemeID) = 'SP']) satisfies                                                    not(contains(normalize-space($x/@schemeID), ' ')) and                                                     contains($cl_spidtype, concat(' ', normalize-space($x/@schemeID), ' ')))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-28" test="every $x in (tsr:Key[normalize-space(@metaSchemeID) = 'SP']) satisfies                                                    not(contains(normalize-space($x/@schemeID), ' ')) and                                                     contains($cl_spidtype, concat(' ', normalize-space($x/@schemeID), ' '))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-28] <xsl:value-of select="$name"/> MUST have one SP Key element with the scheme ID coded according to the code list</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e45', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/tsr:TransactionStatisticsReport/tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR-CC']" mode="group.d2e45" priority="1"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e45' = $schxslt:pattern"><svrl:suppressed-rule context="/tsr:TransactionStatisticsReport/tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR-CC']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/tsr:TransactionStatisticsReport/tsr:Subtotal[normalize-space(@type) = 'PerSP-DT-PR-CC']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:variable name="name" select="'The subtotal per Service Provider ID, Dataset Type ID, Sender Country and Receiver Country'"/><xsl:if test="not(every $sp in (tsr:Key[normalize-space(@metaSchemeID) = 'SP']),                                                        $dt in (tsr:Key[normalize-space(@metaSchemeID) = 'DT']),                                                        $pr in (tsr:Key[normalize-space(@metaSchemeID) = 'PR']),                                                        $sc in (tsr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'SenderCountry']),                                                        $rc in (tsr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'ReceiverCountry']) satisfies                                                    count(key('key-spdtprcc', concat (f:schemeAndValue($sp),'::',                                                                                      f:schemeAndValue($dt),'::',                                                                                      f:schemeAndValue($pr),'::',                                                                                      f:schemeAndValue($sc),'::',                                                                                      f:schemeAndValue($rc)))) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-14" test="every $sp in (tsr:Key[normalize-space(@metaSchemeID) = 'SP']),                                                        $dt in (tsr:Key[normalize-space(@metaSchemeID) = 'DT']),                                                        $pr in (tsr:Key[normalize-space(@metaSchemeID) = 'PR']),                                                        $sc in (tsr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'SenderCountry']),                                                        $rc in (tsr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'ReceiverCountry']) satisfies                                                    count(key('key-spdtprcc', concat (f:schemeAndValue($sp),'::',                                                                                      f:schemeAndValue($dt),'::',                                                                                      f:schemeAndValue($pr),'::',                                                                                      f:schemeAndValue($sc),'::',                                                                                      f:schemeAndValue($rc)))) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-14] Each combination of <xsl:value-of select="$name_spdtprcc"/> MUST occur only once.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Key) = 5)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-29" test="count(tsr:Key) = 5" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-29] <xsl:value-of select="$name"/> MUST have five Key elements</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Key[normalize-space(@metaSchemeID) = 'SP']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-30" test="count(tsr:Key[normalize-space(@metaSchemeID) = 'SP']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-30] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'SP'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Key[normalize-space(@metaSchemeID) = 'DT']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-31" test="count(tsr:Key[normalize-space(@metaSchemeID) = 'DT']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-31] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'DT'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Key[normalize-space(@metaSchemeID) = 'PR']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-32" test="count(tsr:Key[normalize-space(@metaSchemeID) = 'PR']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-32] <xsl:value-of select="$name"/> MUST have one Key element with the meta scheme ID 'PR'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Key[normalize-space(@metaSchemeID) = 'CC']) = 2)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-33" test="count(tsr:Key[normalize-space(@metaSchemeID) = 'CC']) = 2" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-33] <xsl:value-of select="$name"/> MUST have two Key elements with the meta scheme ID 'CC'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(every $x in (tsr:Key[normalize-space(@metaSchemeID) = 'SP']) satisfies                                                    not(contains(normalize-space($x/@schemeID), ' ')) and                                                     contains($cl_spidtype, concat(' ', normalize-space($x/@schemeID), ' ')))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-34" test="every $x in (tsr:Key[normalize-space(@metaSchemeID) = 'SP']) satisfies                                                    not(contains(normalize-space($x/@schemeID), ' ')) and                                                     contains($cl_spidtype, concat(' ', normalize-space($x/@schemeID), ' '))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-34] <xsl:value-of select="$name"/> MUST have one SP Key element with the scheme ID coded according to the code list</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'SenderCountry']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-35" test="count(tsr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'SenderCountry']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-35] <xsl:value-of select="$name"/> MUST have one CC Key element with the scheme ID 'SenderCountry'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(tsr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'ReceiverCountry']) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-36" test="count(tsr:Key[normalize-space(@metaSchemeID) = 'CC'][normalize-space(@schemeID) = 'ReceiverCountry']) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-36] <xsl:value-of select="$name"/> MUST have one CC Key element with the scheme ID 'ReceiverCountry'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(tsr:Outgoing = 0)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-43" test="tsr:Outgoing = 0" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-43] <xsl:value-of select="$name"/> MUST have a 'Outgoing' value of '0' because that data cannot be gathered</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e45', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/tsr:TransactionStatisticsReport/tsr:Subtotal" mode="group.d2e45" priority="0"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e45' = $schxslt:pattern"><svrl:suppressed-rule context="/tsr:TransactionStatisticsReport/tsr:Subtotal"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/tsr:TransactionStatisticsReport/tsr:Subtotal"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(not(contains(normalize-space(@type), ' ')) and                                                  contains($cl_subtotalType, concat(' ', normalize-space(@type), ' ')))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SCH-TSR-37" test="not(contains(normalize-space(@type), ' ')) and                                                  contains($cl_subtotalType, concat(' ', normalize-space(@type), ' '))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[SCH-TSR-37] The Subtotal type (<xsl:value-of select="normalize-space(@type)"/>) MUST be coded according to the code list</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e45', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="root()" as="element(svrl:schematron-output)"><svrl:schematron-output schemaVersion="ISO19757-3" phase="#ALL"><svrl:ns-prefix-in-attribute-values prefix="tsr" uri="urn:fdc:peppol:transaction-statistics-report:1.0"/><svrl:ns-prefix-in-attribute-values prefix="f" uri="#functions"/><!--SchXslt2 Core 1.1--><svrl:active-pattern id="default"><xsl:attribute name="documents" select="document-uri(.)"/></svrl:active-pattern><xsl:apply-templates select="." mode="group.d2e45"/></svrl:schematron-output></xsl:template></xsl:stylesheet>
