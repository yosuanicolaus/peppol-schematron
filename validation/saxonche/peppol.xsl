<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" xmlns:err="http://www.w3.org/2005/xqt-errors" xmlns:map="http://www.w3.org/2005/xpath-functions/map" xmlns:sch="http://purl.oclc.org/dsdl/schematron" xmlns:schxslt="http://dmaus.name/ns/2023/schxslt" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:u="utils" xmlns:ubl-creditnote="urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2" xmlns:ubl-invoice="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="3.0" expand-text="false"><xsl:variable name="schxslt:phase" as="xs:string" select="'#ALL'"/><xsl:param xmlns="http://purl.oclc.org/dsdl/schematron" name="profile" select="       if (/*/cbc:ProfileID and matches(normalize-space(/*/cbc:ProfileID), 'urn:fdc:peppol.eu:2017:poacc:billing:([0-9]{2}):1.0')) then         tokenize(normalize-space(/*/cbc:ProfileID), ':')[7]       else         'Unknown'"/><xsl:param xmlns="http://purl.oclc.org/dsdl/schematron" name="supplierCountry" select="       if (/*/cac:AccountingSupplierParty/cac:Party/cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2)) then         upper-case(normalize-space(/*/cac:AccountingSupplierParty/cac:Party/cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2)))       else         if (/*/cac:TaxRepresentativeParty/cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2)) then           upper-case(normalize-space(/*/cac:TaxRepresentativeParty/cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2)))         else           if (/*/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode) then             upper-case(normalize-space(/*/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode))           else             'XX'"/><xsl:param xmlns="http://purl.oclc.org/dsdl/schematron" name="customerCountry" select="   if (/*/cac:AccountingCustomerParty/cac:Party/cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2)) then   upper-case(normalize-space(/*/cac:AccountingCustomerParty/cac:Party/cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2)))   else   if (/*/cac:AccountingCustomerParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode) then   upper-case(normalize-space(/*/cac:AccountingCustomerParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode))   else   'XX'"/><xsl:param xmlns="http://purl.oclc.org/dsdl/schematron" name="documentCurrencyCode" select="/*/cbc:DocumentCurrencyCode"/><xsl:param xmlns="http://purl.oclc.org/dsdl/schematron" name="isGreekSender" select="($supplierCountry ='GR') or ($supplierCountry ='EL')"/><xsl:param xmlns="http://purl.oclc.org/dsdl/schematron" name="isGreekReceiver" select="($customerCountry ='GR') or ($customerCountry ='EL')"/><xsl:param xmlns="http://purl.oclc.org/dsdl/schematron" name="isGreekSenderandReceiver" select="$isGreekSender and $isGreekReceiver"/><xsl:param xmlns="http://purl.oclc.org/dsdl/schematron" name="accountingSupplierCountry" select="     if (/*/cac:AccountingSupplierParty/cac:Party/cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2)) then     upper-case(normalize-space(/*/cac:AccountingSupplierParty/cac:Party/cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2)))     else     if (/*/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode) then     upper-case(normalize-space(/*/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode))     else     'XX'"/><function xmlns="http://www.w3.org/1999/XSL/Transform" name="u:gln" as="xs:boolean">
    <param name="val"/>
    <variable name="length" select="string-length($val) - 1"/>
    <variable name="digits" select="reverse(for $i in string-to-codepoints(substring($val, 0, $length + 1)) return $i - 48)"/>
    <variable name="weightedSum" select="sum(for $i in (0 to $length - 1) return $digits[$i + 1] * (1 + ((($i + 1) mod 2) * 2)))"/>
    <value-of select="(10 - ($weightedSum mod 10)) mod 10 = number(substring($val, $length + 1, 1))"/>
  </function><function xmlns="http://www.w3.org/1999/XSL/Transform" name="u:slack" as="xs:boolean">
    <param name="exp" as="xs:decimal"/>
    <param name="val" as="xs:decimal"/>
    <param name="slack" as="xs:decimal"/>
    <value-of select="xs:decimal($exp + $slack) &gt;= $val and xs:decimal($exp - $slack) &lt;= $val"/>
  </function><function xmlns="http://www.w3.org/1999/XSL/Transform" name="u:mod11" as="xs:boolean">
    <param name="val"/>
    <variable name="length" select="string-length($val) - 1"/>
    <variable name="digits" select="reverse(for $i in string-to-codepoints(substring($val, 0, $length + 1)) return $i - 48)"/>
    <variable name="weightedSum" select="sum(for $i in (0 to $length - 1) return $digits[$i + 1] * (($i mod 6) + 2))"/>
    <value-of select="number($val) &gt; 0 and (11 - ($weightedSum mod 11)) mod 11 = number(substring($val, $length + 1, 1))"/>
  </function><function xmlns="http://www.w3.org/1999/XSL/Transform" name="u:mod97-0208" as="xs:boolean">
    <param name="val"/>
    <variable name="checkdigits" select="substring($val,9,2)"/>
    <variable name="calculated_digits" select="xs:string(97 - (xs:integer(substring($val,1,8)) mod 97))"/>
    <value-of select="number($checkdigits) = number($calculated_digits)"/>
  </function><function xmlns="http://www.w3.org/1999/XSL/Transform" name="u:checkCodiceIPA" as="xs:boolean">
    <param name="arg" as="xs:string?"/>
    <variable name="allowed-characters">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789</variable>
    <sequence select="if ( (string-length(translate($arg, $allowed-characters, '')) = 0) and (string-length($arg) = 6) ) then true() else false()"/>
  </function><function xmlns="http://www.w3.org/1999/XSL/Transform" name="u:checkCF" as="xs:boolean">
    <param name="arg" as="xs:string?"/>
    <sequence select="   if ( (string-length($arg) = 16) or (string-length($arg) = 11) )      then    (    if ((string-length($arg) = 16))     then    (     if (u:checkCF16($arg))      then     (      true()     )     else     (      false()     )    )    else    (     if(($arg castable as xs:integer)) then true() else false()       )   )   else   (    false()   )   "/>
  </function><function xmlns="http://www.w3.org/1999/XSL/Transform" name="u:checkCF16" as="xs:boolean">
    <param name="arg" as="xs:string?"/>
    <variable name="allowed-characters">ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz</variable>
    <sequence select="     if (  (string-length(translate(substring($arg,1,6), $allowed-characters, '')) = 0) and         (substring($arg,7,2) castable as xs:integer) and        (string-length(translate(substring($arg,9,1), $allowed-characters, '')) = 0) and        (substring($arg,10,2) castable as xs:integer) and         (substring($arg,12,3) castable as xs:string) and        (substring($arg,15,1) castable as xs:integer) and         (string-length(translate(substring($arg,16,1), $allowed-characters, '')) = 0)      )      then true()     else false()     "/>
  </function><function xmlns="http://www.w3.org/1999/XSL/Transform" name="u:checkPIVAseIT" as="xs:boolean">
    <param name="arg" as="xs:string"/>
    <variable name="paese" select="substring($arg,1,2)"/>
    <variable name="codice" select="substring($arg,3)"/>
    <sequence select="     if ( $paese = 'IT' or $paese = 'it' )    then    (     if ( ( string-length($codice) = 11 ) and ( if (u:checkPIVA($codice)!=0) then false() else true() ))     then     (      true()     )     else     (      false()     )    )    else    (     true()    )      "/>
  </function><function xmlns="http://www.w3.org/1999/XSL/Transform" name="u:checkPIVA" as="xs:integer">
    <param name="arg" as="xs:string?"/>
    <sequence select="     if (not($arg castable as xs:integer))       then 1      else ( u:addPIVA($arg,xs:integer(0)) mod 10 )"/>
  </function><function xmlns="http://www.w3.org/1999/XSL/Transform" name="u:addPIVA" as="xs:integer">
    <param name="arg" as="xs:string"/>
    <param name="pari" as="xs:integer"/>
    <variable name="tappo" select="if (not($arg castable as xs:integer)) then 0 else 1"/>
    <variable name="mapper" select="if ($tappo = 0) then 0 else                    ( if ($pari = 1)                     then ( xs:integer(substring('0246813579', ( xs:integer(substring($arg,1,1)) +1 ) ,1)) )                     else ( xs:integer(substring($arg,1,1) ) )                   )"/>
    <sequence select="if ($tappo = 0) then $mapper else ( xs:integer($mapper) + u:addPIVA(substring(xs:string($arg),2), (if($pari=0) then 1 else 0) ) )"/>
  </function><function xmlns="http://www.w3.org/1999/XSL/Transform" name="u:abn" as="xs:boolean">
    <param name="val"/>
    <value-of select="( ((string-to-codepoints(substring($val,1,1)) - 49) * 10) + ((string-to-codepoints(substring($val,2,1)) - 48) * 1) + ((string-to-codepoints(substring($val,3,1)) - 48) * 3) + ((string-to-codepoints(substring($val,4,1)) - 48) * 5) + ((string-to-codepoints(substring($val,5,1)) - 48) * 7) + ((string-to-codepoints(substring($val,6,1)) - 48) * 9) + ((string-to-codepoints(substring($val,7,1)) - 48) * 11) + ((string-to-codepoints(substring($val,8,1)) - 48) * 13) + ((string-to-codepoints(substring($val,9,1)) - 48) * 15) + ((string-to-codepoints(substring($val,10,1)) - 48) * 17) + ((string-to-codepoints(substring($val,11,1)) - 48) * 19)) mod 89 = 0 "/>
  </function><function xmlns="http://www.w3.org/1999/XSL/Transform" name="u:TinVerification" as="xs:boolean">
    <param name="val" as="xs:string"/>
    <variable name="digits" select="    for $ch in string-to-codepoints($val)    return codepoints-to-string($ch)"/>
    <variable name="checksum" select="    (number($digits[8])*2) +    (number($digits[7])*4) +    (number($digits[6])*8) +    (number($digits[5])*16) +    (number($digits[4])*32) +    (number($digits[3])*64) +    (number($digits[2])*128) +    (number($digits[1])*256) "/>
    <value-of select="($checksum  mod 11) mod 10 = number($digits[9])"/>
  </function><xsl:mode name="group.d2e163" on-no-match="shallow-skip" streamable="false"/><xsl:template match="*" mode="group.d2e163" priority="-10"><xsl:apply-templates select="@*" mode="#current"/><xsl:apply-templates select="node()" mode="#current"/></xsl:template><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="DKSupplierCountry" select="concat(ubl-creditnote:CreditNote/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode, ubl-invoice:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode)"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="DKCustomerCountry" select="concat(ubl-creditnote:CreditNote/cac:AccountingCustomerParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode, ubl-invoice:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode)"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="dateRegExp" select="'^(0?[1-9]|[12][0-9]|3[01])[-\\/ ]?(0?[1-9]|1[0-2])[-\\/ ]?(19|20)[0-9]{2}'"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="greekDocumentType" select="tokenize('1.1 1.6 2.1 2.4 5.1 5.2 ','\s')"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="tokenizedUblIssueDate" select="tokenize(/*/cbc:IssueDate,'-')"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="SupplierCountry" select="concat(ubl-creditnote:CreditNote/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode, ubl-invoice:Invoice/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode)"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="CustomerCountry" select="concat(ubl-creditnote:CreditNote/cac:AccountingCustomerParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode, ubl-invoice:Invoice/cac:AccountingCustomerParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode)"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="supplierCountryIsNL" select="(upper-case(normalize-space(/*/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode)) = 'NL')"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="customerCountryIsNL" select="(upper-case(normalize-space(/*/cac:AccountingCustomerParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode)) = 'NL')"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="taxRepresentativeCountryIsNL" select="(upper-case(normalize-space(/*/cac:TaxRepresentativeParty/cac:PostalAddress/cac:Country/cbc:IdentificationCode)) = 'NL')"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="ISO3166" select="tokenize('AD AE AF AG AI AL AM AO AQ AR AS AT AU AW AX AZ BA BB BD BE BF BG BH BI BJ BL BM BN BO BQ BR BS BT BV BW BY BZ CA CC CD CF CG CH CI CK CL CM CN CO CR CU CV CW CX CY CZ DE DJ DK DM DO DZ EC EE EG EH ER ES ET FI FJ FK FM FO FR GA GB GD GE GF GG GH GI GL GM GN GP GQ GR GS GT GU GW GY HK HM HN HR HT HU ID IE IL IM IN IO IQ IR IS IT JE JM JO JP KE KG KH KI KM KN KP KR KW KY KZ LA LB LC LI LK LR LS LT LU LV LY MA MC MD ME MF MG MH MK ML MM MN MO MP MQ MR MS MT MU MV MW MX MY MZ NA NC NE NF NG NI NL NO NP NR NU NZ OM PA PE PF PG PH PK PL PM PN PR PS PT PW PY QA RE RO RS RU RW SA SB SC SD SE SG SH SI SJ SK SL SM SN SO SR SS ST SV SX SY SZ TC TD TF TG TH TJ TK TL TM TN TO TR TT TV TW TZ UA UG UM US UY UZ VA VC VE VG VI VN VU WF WS YE YT ZA ZM ZW 1A XI', '\s')"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="ISO4217" select="tokenize('AED AFN ALL AMD ANG AOA ARS AUD AWG AZN BAM BBD BDT BGN BHD BIF BMD BND BOB BOV BRL BSD BTN BWP BYN BZD CAD CDF CHE CHF CHW CLF CLP CNY COP COU CRC CUC CUP CVE CZK DJF DKK DOP DZD EGP ERN ETB EUR FJD FKP GBP GEL GHS GIP GMD GNF GTQ GYD HKD HNL HRK HTG HUF IDR ILS INR IQD IRR ISK JMD JOD JPY KES KGS KHR KMF KPW KRW KWD KYD KZT LAK LBP LKR LRD LSL LYD MAD MDL MGA MKD MMK MNT MOP MRO MUR MVR MWK MXN MXV MYR MZN NAD NGN NIO NOK NPR NZD OMR PAB PEN PGK PHP PKR PLN PYG QAR RON RSD RUB RWF SAR SBD SCR SDG SEK SGD SHP SLL SOS SRD SSP STN SVC SYP SZL THB TJS TMT TND TOP TRY TTD TWD TZS UAH UGX USD USN UYI UYU UZS VEF VND VUV WST XAF XAG XAU XBA XBB XBC XBD XCD XDR XOF XPD XPF XPT XSU XTS XUA XXX YER ZAR ZMW ZWL', '\s')"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="MIMECODE" select="tokenize('application/pdf image/png image/jpeg text/csv application/vnd.openxmlformats-officedocument.spreadsheetml.sheet application/vnd.oasis.opendocument.spreadsheet', '\s')"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="UNCL2005" select="tokenize('3 35 432', '\s')"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="UNCL5189" select="tokenize('41 42 60 62 63 64 65 66 67 68 70 71 88 95 100 102 103 104 105', '\s')"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="UNCL7161" select="tokenize('AA AAA AAC AAD AAE AAF AAH AAI AAS AAT AAV AAY AAZ ABA ABB ABC ABD ABF ABK ABL ABN ABR ABS ABT ABU ACF ACG ACH ACI ACJ ACK ACL ACM ACS ADC ADE ADJ ADK ADL ADM ADN ADO ADP ADQ ADR ADT ADW ADY ADZ AEA AEB AEC AED AEF AEH AEI AEJ AEK AEL AEM AEN AEO AEP AES AET AEU AEV AEW AEX AEY AEZ AJ AU CA CAB CAD CAE CAF CAI CAJ CAK CAL CAM CAN CAO CAP CAQ CAR CAS CAT CAU CAV CAW CAX CAY CAZ CD CG CS CT DAB DAC DAD DAF DAG DAH DAI DAJ DAK DAL DAM DAN DAO DAP DAQ DL EG EP ER FAA FAB FAC FC FH FI GAA HAA HD HH IAA IAB ID IF IR IS KO L1 LA LAA LAB LF MAE MI ML NAA OA PA PAA PC PL RAB RAC RAD RAF RE RF RH RV SA SAA SAD SAE SAI SG SH SM SU TAB TAC TT TV V1 V2 WH XAA YY ZZZ', '\s')"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="UNCL5305" select="tokenize('AE E S Z G O K L M', '\s')"/><xsl:variable xmlns="http://purl.oclc.org/dsdl/schematron" name="eaid" select="tokenize('0002 0007 0009 0037 0060 0088 0096 0097 0106 0130 0135 0142 0151 0183 0184 0188 0190 0191 0192 0193 0195 0196 0198 0199 0200 0201 0202 0204 0208 0209 0210 0211 0212 0213 0215 0216 0218 0221 0230 9901 9910 9913 9914 9915 9918 9919 9920 9922 9923 9924 9925 9926 9927 9928 9929 9930 9931 9932 9933 9934 9935 9936 9937 9938 9939 9940 9941 9942 9943 9944 9945 9946 9947 9948 9949 9950 9951 9952 9953 9957 9959', '\s')"/><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="//*[not(*) and not(normalize-space())]" mode="group.d2e163" priority="79"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e163' = $schxslt:pattern"><svrl:suppressed-rule context="//*[not(*) and not(normalize-space())]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="//*[not(*) and not(normalize-space())]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(false())"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R008" test="false()" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Document MUST not contain empty elements.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e163', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="ubl-creditnote:CreditNote" mode="group.d2e163" priority="78"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e175' = $schxslt:pattern"><svrl:suppressed-rule context="ubl-creditnote:CreditNote"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="ubl-creditnote:CreditNote"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not((count(cac:AdditionalDocumentReference[cbc:DocumentTypeCode='50']) &lt;= 1))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R080" test="(count(cac:AdditionalDocumentReference[cbc:DocumentTypeCode='50']) &lt;= 1)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Only one project reference is allowed on document level</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e175', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="ubl-creditnote:CreditNote | ubl-invoice:Invoice" mode="group.d2e163" priority="77"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="ubl-creditnote:CreditNote | ubl-invoice:Invoice"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="ubl-creditnote:CreditNote | ubl-invoice:Invoice"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(cbc:ProfileID)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R001" test="cbc:ProfileID" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Business process MUST be provided.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not($profile != 'Unknown')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R007" test="$profile != 'Unknown'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Business process MUST be in the format 'urn:fdc:peppol.eu:2017:poacc:billing:NN:1.0' where NN indicates the process number.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(cbc:Note) &lt;= 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R002" test="count(cbc:Note) &lt;= 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>No more than one note is allowed on document level.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(cbc:BuyerReference or cac:OrderReference/cbc:ID)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R003" test="cbc:BuyerReference or cac:OrderReference/cbc:ID" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>A buyer reference or purchase order reference MUST be provided.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(starts-with(normalize-space(cbc:CustomizationID/text()), 'urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0'))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R004" test="starts-with(normalize-space(cbc:CustomizationID/text()), 'urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0')" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Specification identifier MUST have the value 'urn:cen.eu:en16931:2017#compliant#urn:fdc:peppol.eu:2017:poacc:billing:3.0'.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(cac:TaxTotal[cac:TaxSubtotal]) = 1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R053" test="count(cac:TaxTotal[cac:TaxSubtotal]) = 1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Only one tax total with tax subtotals MUST be provided.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(cac:TaxTotal[not(cac:TaxSubtotal)]) = (if (cbc:TaxCurrencyCode) then 1 else 0))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R054" test="count(cac:TaxTotal[not(cac:TaxSubtotal)]) = (if (cbc:TaxCurrencyCode) then 1 else 0)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Only one tax total without tax subtotals MUST be provided when tax currency code is provided.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(not(cbc:TaxCurrencyCode) or (cac:TaxTotal/cbc:TaxAmount[@currencyID=normalize-space(../../cbc:TaxCurrencyCode)] &lt;= 0 and cac:TaxTotal/cbc:TaxAmount[@currencyID=normalize-space(../../cbc:DocumentCurrencyCode)] &lt;= 0) or (cac:TaxTotal/cbc:TaxAmount[@currencyID=normalize-space(../../cbc:TaxCurrencyCode)] &gt;= 0 and cac:TaxTotal/cbc:TaxAmount[@currencyID=normalize-space(../../cbc:DocumentCurrencyCode)] &gt;= 0) )"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R055" test="not(cbc:TaxCurrencyCode) or (cac:TaxTotal/cbc:TaxAmount[@currencyID=normalize-space(../../cbc:TaxCurrencyCode)] &lt;= 0 and cac:TaxTotal/cbc:TaxAmount[@currencyID=normalize-space(../../cbc:DocumentCurrencyCode)] &lt;= 0) or (cac:TaxTotal/cbc:TaxAmount[@currencyID=normalize-space(../../cbc:TaxCurrencyCode)] &gt;= 0 and cac:TaxTotal/cbc:TaxAmount[@currencyID=normalize-space(../../cbc:DocumentCurrencyCode)] &gt;= 0) " xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Invoice total VAT amount and Invoice total VAT amount in accounting currency MUST have the same operational sign</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:TaxCurrencyCode" mode="group.d2e163" priority="76"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:TaxCurrencyCode"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:TaxCurrencyCode"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(not(normalize-space(text()) = normalize-space(../cbc:DocumentCurrencyCode/text())))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R005" test="not(normalize-space(text()) = normalize-space(../cbc:DocumentCurrencyCode/text()))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>VAT accounting currency code MUST be different from invoice currency code when provided.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingCustomerParty/cac:Party" mode="group.d2e163" priority="75"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingCustomerParty/cac:Party"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingCustomerParty/cac:Party"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(cbc:EndpointID)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R010" test="cbc:EndpointID" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Buyer electronic address MUST be provided</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingSupplierParty/cac:Party" mode="group.d2e163" priority="74"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingSupplierParty/cac:Party"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingSupplierParty/cac:Party"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(cbc:EndpointID)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R020" test="cbc:EndpointID" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Seller electronic address MUST be provided</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="ubl-invoice:Invoice/cac:AllowanceCharge[cbc:MultiplierFactorNumeric and not(cbc:BaseAmount)] | ubl-invoice:Invoice/cac:InvoiceLine/cac:AllowanceCharge[cbc:MultiplierFactorNumeric and not(cbc:BaseAmount)] | ubl-creditnote:CreditNote/cac:AllowanceCharge[cbc:MultiplierFactorNumeric and not(cbc:BaseAmount)] | ubl-creditnote:CreditNote/cac:CreditNoteLine/cac:AllowanceCharge[cbc:MultiplierFactorNumeric and not(cbc:BaseAmount)]" mode="group.d2e163" priority="73"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="ubl-invoice:Invoice/cac:AllowanceCharge[cbc:MultiplierFactorNumeric and not(cbc:BaseAmount)] | ubl-invoice:Invoice/cac:InvoiceLine/cac:AllowanceCharge[cbc:MultiplierFactorNumeric and not(cbc:BaseAmount)] | ubl-creditnote:CreditNote/cac:AllowanceCharge[cbc:MultiplierFactorNumeric and not(cbc:BaseAmount)] | ubl-creditnote:CreditNote/cac:CreditNoteLine/cac:AllowanceCharge[cbc:MultiplierFactorNumeric and not(cbc:BaseAmount)]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="ubl-invoice:Invoice/cac:AllowanceCharge[cbc:MultiplierFactorNumeric and not(cbc:BaseAmount)] | ubl-invoice:Invoice/cac:InvoiceLine/cac:AllowanceCharge[cbc:MultiplierFactorNumeric and not(cbc:BaseAmount)] | ubl-creditnote:CreditNote/cac:AllowanceCharge[cbc:MultiplierFactorNumeric and not(cbc:BaseAmount)] | ubl-creditnote:CreditNote/cac:CreditNoteLine/cac:AllowanceCharge[cbc:MultiplierFactorNumeric and not(cbc:BaseAmount)]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(false())"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R041" test="false()" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Allowance/charge base amount MUST be provided when allowance/charge percentage is provided.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="ubl-invoice:Invoice/cac:AllowanceCharge[not(cbc:MultiplierFactorNumeric) and cbc:BaseAmount] | ubl-invoice:Invoice/cac:InvoiceLine/cac:AllowanceCharge[not(cbc:MultiplierFactorNumeric) and cbc:BaseAmount] | ubl-creditnote:CreditNote/cac:AllowanceCharge[not(cbc:MultiplierFactorNumeric) and cbc:BaseAmount] | ubl-creditnote:CreditNote/cac:CreditNoteLine/cac:AllowanceCharge[not(cbc:MultiplierFactorNumeric) and cbc:BaseAmount]" mode="group.d2e163" priority="72"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="ubl-invoice:Invoice/cac:AllowanceCharge[not(cbc:MultiplierFactorNumeric) and cbc:BaseAmount] | ubl-invoice:Invoice/cac:InvoiceLine/cac:AllowanceCharge[not(cbc:MultiplierFactorNumeric) and cbc:BaseAmount] | ubl-creditnote:CreditNote/cac:AllowanceCharge[not(cbc:MultiplierFactorNumeric) and cbc:BaseAmount] | ubl-creditnote:CreditNote/cac:CreditNoteLine/cac:AllowanceCharge[not(cbc:MultiplierFactorNumeric) and cbc:BaseAmount]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="ubl-invoice:Invoice/cac:AllowanceCharge[not(cbc:MultiplierFactorNumeric) and cbc:BaseAmount] | ubl-invoice:Invoice/cac:InvoiceLine/cac:AllowanceCharge[not(cbc:MultiplierFactorNumeric) and cbc:BaseAmount] | ubl-creditnote:CreditNote/cac:AllowanceCharge[not(cbc:MultiplierFactorNumeric) and cbc:BaseAmount] | ubl-creditnote:CreditNote/cac:CreditNoteLine/cac:AllowanceCharge[not(cbc:MultiplierFactorNumeric) and cbc:BaseAmount]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(false())"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R042" test="false()" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Allowance/charge percentage MUST be provided when allowance/charge base amount is provided.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="ubl-invoice:Invoice/cac:AllowanceCharge | ubl-invoice:Invoice/cac:InvoiceLine/cac:AllowanceCharge | ubl-creditnote:CreditNote/cac:AllowanceCharge | ubl-creditnote:CreditNote/cac:CreditNoteLine/cac:AllowanceCharge" mode="group.d2e163" priority="71"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="ubl-invoice:Invoice/cac:AllowanceCharge | ubl-invoice:Invoice/cac:InvoiceLine/cac:AllowanceCharge | ubl-creditnote:CreditNote/cac:AllowanceCharge | ubl-creditnote:CreditNote/cac:CreditNoteLine/cac:AllowanceCharge"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="ubl-invoice:Invoice/cac:AllowanceCharge | ubl-invoice:Invoice/cac:InvoiceLine/cac:AllowanceCharge | ubl-creditnote:CreditNote/cac:AllowanceCharge | ubl-creditnote:CreditNote/cac:CreditNoteLine/cac:AllowanceCharge"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(           not(cbc:MultiplierFactorNumeric and cbc:BaseAmount) or u:slack(if (cbc:Amount) then             cbc:Amount           else             0, (xs:decimal(cbc:BaseAmount) * xs:decimal(cbc:MultiplierFactorNumeric)) div 100, 0.02))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R040" test="           not(cbc:MultiplierFactorNumeric and cbc:BaseAmount) or u:slack(if (cbc:Amount) then             cbc:Amount           else             0, (xs:decimal(cbc:BaseAmount) * xs:decimal(cbc:MultiplierFactorNumeric)) div 100, 0.02)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Allowance/charge amount must equal base amount * percentage/100 if base amount and percentage exists</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(normalize-space(cbc:ChargeIndicator/text()) = 'true' or normalize-space(cbc:ChargeIndicator/text()) = 'false')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R043" test="normalize-space(cbc:ChargeIndicator/text()) = 'true' or normalize-space(cbc:ChargeIndicator/text()) = 'false'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Allowance/charge ChargeIndicator value MUST equal 'true' or 'false'</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="         cac:PaymentMeans[some $code in tokenize('49 59', '\s')           satisfies normalize-space(cbc:PaymentMeansCode) = $code]" mode="group.d2e163" priority="70"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="         cac:PaymentMeans[some $code in tokenize('49 59', '\s')           satisfies normalize-space(cbc:PaymentMeansCode) = $code]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="         cac:PaymentMeans[some $code in tokenize('49 59', '\s')           satisfies normalize-space(cbc:PaymentMeansCode) = $code]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(cac:PaymentMandate/cbc:ID)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R061" test="cac:PaymentMandate/cbc:ID" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Mandate reference MUST be provided for direct debit.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cac:TaxTotal[cac:TaxSubtotal]/cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount" mode="group.d2e163" priority="69"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cac:TaxTotal[cac:TaxSubtotal]/cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cac:TaxTotal[cac:TaxSubtotal]/cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(@currencyID = $documentCurrencyCode)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R051" test="@currencyID = $documentCurrencyCode" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>All currencyID attributes must have the same value as the invoice currency code (BT-5), except for the invoice total VAT amount in accounting currency (BT-111).</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="ubl-invoice:Invoice[cac:InvoicePeriod/cbc:StartDate]/cac:InvoiceLine/cac:InvoicePeriod/cbc:StartDate | ubl-creditnote:CreditNote[cac:InvoicePeriod/cbc:StartDate]/cac:CreditNoteLine/cac:InvoicePeriod/cbc:StartDate" mode="group.d2e163" priority="68"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="ubl-invoice:Invoice[cac:InvoicePeriod/cbc:StartDate]/cac:InvoiceLine/cac:InvoicePeriod/cbc:StartDate | ubl-creditnote:CreditNote[cac:InvoicePeriod/cbc:StartDate]/cac:CreditNoteLine/cac:InvoicePeriod/cbc:StartDate"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="ubl-invoice:Invoice[cac:InvoicePeriod/cbc:StartDate]/cac:InvoiceLine/cac:InvoicePeriod/cbc:StartDate | ubl-creditnote:CreditNote[cac:InvoicePeriod/cbc:StartDate]/cac:CreditNoteLine/cac:InvoicePeriod/cbc:StartDate"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(xs:date(text()) &gt;= xs:date(../../../cac:InvoicePeriod/cbc:StartDate))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R110" test="xs:date(text()) &gt;= xs:date(../../../cac:InvoicePeriod/cbc:StartDate)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Start date of line period MUST be within invoice period.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="ubl-invoice:Invoice[cac:InvoicePeriod/cbc:EndDate]/cac:InvoiceLine/cac:InvoicePeriod/cbc:EndDate | ubl-creditnote:CreditNote[cac:InvoicePeriod/cbc:EndDate]/cac:CreditNoteLine/cac:InvoicePeriod/cbc:EndDate" mode="group.d2e163" priority="67"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="ubl-invoice:Invoice[cac:InvoicePeriod/cbc:EndDate]/cac:InvoiceLine/cac:InvoicePeriod/cbc:EndDate | ubl-creditnote:CreditNote[cac:InvoicePeriod/cbc:EndDate]/cac:CreditNoteLine/cac:InvoicePeriod/cbc:EndDate"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="ubl-invoice:Invoice[cac:InvoicePeriod/cbc:EndDate]/cac:InvoiceLine/cac:InvoicePeriod/cbc:EndDate | ubl-creditnote:CreditNote[cac:InvoicePeriod/cbc:EndDate]/cac:CreditNoteLine/cac:InvoicePeriod/cbc:EndDate"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(xs:date(text()) &lt;= xs:date(../../../cac:InvoicePeriod/cbc:EndDate))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R111" test="xs:date(text()) &lt;= xs:date(../../../cac:InvoicePeriod/cbc:EndDate)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>End date of line period MUST be within invoice period.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:InvoiceLine | cac:CreditNoteLine" mode="group.d2e163" priority="66"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cac:InvoiceLine | cac:CreditNoteLine"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:InvoiceLine | cac:CreditNoteLine"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:variable name="lineExtensionAmount" select="           if (cbc:LineExtensionAmount) then             xs:decimal(cbc:LineExtensionAmount)           else             0"/><xsl:variable name="quantity" select="           if (/ubl-invoice:Invoice) then             (if (cbc:InvoicedQuantity) then               xs:decimal(cbc:InvoicedQuantity)             else               1)           else             (if (cbc:CreditedQuantity) then               xs:decimal(cbc:CreditedQuantity)             else               1)"/><xsl:variable name="priceAmount" select="           if (cac:Price/cbc:PriceAmount) then             xs:decimal(cac:Price/cbc:PriceAmount)           else             0"/><xsl:variable name="baseQuantity" select="           if (cac:Price/cbc:BaseQuantity and xs:decimal(cac:Price/cbc:BaseQuantity) != 0) then             xs:decimal(cac:Price/cbc:BaseQuantity)           else             1"/><xsl:variable name="allowancesTotal" select="           if (cac:AllowanceCharge[normalize-space(cbc:ChargeIndicator) = 'false']) then             round(sum(cac:AllowanceCharge[normalize-space(cbc:ChargeIndicator) = 'false']/cbc:Amount/xs:decimal(.)) * 10 * 10) div 100           else             0"/><xsl:variable name="chargesTotal" select="           if (cac:AllowanceCharge[normalize-space(cbc:ChargeIndicator) = 'true']) then             round(sum(cac:AllowanceCharge[normalize-space(cbc:ChargeIndicator) = 'true']/cbc:Amount/xs:decimal(.)) * 10 * 10) div 100           else             0"/><xsl:if test="not(u:slack($lineExtensionAmount, ($quantity * ($priceAmount div $baseQuantity)) + $chargesTotal - $allowancesTotal, 0.02))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R120" test="u:slack($lineExtensionAmount, ($quantity * ($priceAmount div $baseQuantity)) + $chargesTotal - $allowancesTotal, 0.02)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Invoice line net amount MUST equal (Invoiced quantity * (Item net price/item price base quantity) + Sum of invoice line charge amount - sum of invoice line allowance amount</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(not(cac:Price/cbc:BaseQuantity) or xs:decimal(cac:Price/cbc:BaseQuantity) &gt; 0)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R121" test="not(cac:Price/cbc:BaseQuantity) or xs:decimal(cac:Price/cbc:BaseQuantity) &gt; 0" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Base quantity MUST be a positive number above zero.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not((count(cac:DocumentReference) &lt;= 1))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R100" test="(count(cac:DocumentReference) &lt;= 1)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Only one invoiced object is allowed pr line</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not((not(cac:DocumentReference) or (cac:DocumentReference/cbc:DocumentTypeCode='130')))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R101" test="(not(cac:DocumentReference) or (cac:DocumentReference/cbc:DocumentTypeCode='130'))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Element Document reference can only be used for Invoice line object</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:Price/cac:AllowanceCharge" mode="group.d2e163" priority="65"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cac:Price/cac:AllowanceCharge"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:Price/cac:AllowanceCharge"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(normalize-space(cbc:ChargeIndicator) = 'false')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R044" test="normalize-space(cbc:ChargeIndicator) = 'false'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Charge on price level is NOT allowed. Only value 'false' allowed.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(not(cbc:BaseAmount) or xs:decimal(../cbc:PriceAmount) = xs:decimal(cbc:BaseAmount) - xs:decimal(cbc:Amount))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R046" test="not(cbc:BaseAmount) or xs:decimal(../cbc:PriceAmount) = xs:decimal(cbc:BaseAmount) - xs:decimal(cbc:Amount)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Item net price MUST equal (Gross price - Allowance amount) when gross price is provided.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:Price/cbc:BaseQuantity[@unitCode]" mode="group.d2e163" priority="64"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cac:Price/cbc:BaseQuantity[@unitCode]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:Price/cbc:BaseQuantity[@unitCode]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:variable name="hasQuantity" select="../../cbc:InvoicedQuantity or ../../cbc:CreditedQuantity"/><xsl:variable name="quantity" select="           if (/ubl-invoice:Invoice) then             ../../cbc:InvoicedQuantity           else             ../../cbc:CreditedQuantity"/><xsl:if test="not(not($hasQuantity) or @unitCode = $quantity/@unitCode)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-R130" test="not($hasQuantity) or @unitCode = $quantity/@unitCode" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Unit code of price base quantity MUST be same as invoiced quantity.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:EndpointID[@schemeID = '0088'] | cac:PartyIdentification/cbc:ID[@schemeID = '0088'] | cbc:CompanyID[@schemeID = '0088']" mode="group.d2e163" priority="63"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:EndpointID[@schemeID = '0088'] | cac:PartyIdentification/cbc:ID[@schemeID = '0088'] | cbc:CompanyID[@schemeID = '0088']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:EndpointID[@schemeID = '0088'] | cac:PartyIdentification/cbc:ID[@schemeID = '0088'] | cbc:CompanyID[@schemeID = '0088']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(matches(normalize-space(), '^[0-9]+$') and u:gln(normalize-space()))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-COMMON-R040" test="matches(normalize-space(), '^[0-9]+$') and u:gln(normalize-space())" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>GLN must have a valid format according to GS1 rules.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:EndpointID[@schemeID = '0192'] | cac:PartyIdentification/cbc:ID[@schemeID = '0192'] | cbc:CompanyID[@schemeID = '0192']" mode="group.d2e163" priority="62"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:EndpointID[@schemeID = '0192'] | cac:PartyIdentification/cbc:ID[@schemeID = '0192'] | cbc:CompanyID[@schemeID = '0192']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:EndpointID[@schemeID = '0192'] | cac:PartyIdentification/cbc:ID[@schemeID = '0192'] | cbc:CompanyID[@schemeID = '0192']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(matches(normalize-space(), '^[0-9]{9}$') and u:mod11(normalize-space()))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-COMMON-R041" test="matches(normalize-space(), '^[0-9]{9}$') and u:mod11(normalize-space())" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Norwegian organization number MUST be stated in the correct format.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:EndpointID[@schemeID = '0184'] | cac:PartyIdentification/cbc:ID[@schemeID = '0184'] | cbc:CompanyID[@schemeID = '0184']" mode="group.d2e163" priority="61"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:EndpointID[@schemeID = '0184'] | cac:PartyIdentification/cbc:ID[@schemeID = '0184'] | cbc:CompanyID[@schemeID = '0184']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:EndpointID[@schemeID = '0184'] | cac:PartyIdentification/cbc:ID[@schemeID = '0184'] | cbc:CompanyID[@schemeID = '0184']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not((string-length(text()) = 10) and (substring(text(), 1, 2) = 'DK') and (string-length(translate(substring(text(), 3, 8), '1234567890', '')) = 0))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-COMMON-R042" test="(string-length(text()) = 10) and (substring(text(), 1, 2) = 'DK') and (string-length(translate(substring(text(), 3, 8), '1234567890', '')) = 0)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Danish organization number (CVR) MUST be stated in the correct format.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:EndpointID[@schemeID = '0208'] | cac:PartyIdentification/cbc:ID[@schemeID = '0208'] | cbc:CompanyID[@schemeID = '0208']" mode="group.d2e163" priority="60"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:EndpointID[@schemeID = '0208'] | cac:PartyIdentification/cbc:ID[@schemeID = '0208'] | cbc:CompanyID[@schemeID = '0208']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:EndpointID[@schemeID = '0208'] | cac:PartyIdentification/cbc:ID[@schemeID = '0208'] | cbc:CompanyID[@schemeID = '0208']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(matches(normalize-space(), '^[0-9]{10}$') and u:mod97-0208(normalize-space()))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-COMMON-R043" test="matches(normalize-space(), '^[0-9]{10}$') and u:mod97-0208(normalize-space())" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Belgian enterprise number MUST be stated in the correct format.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:EndpointID[@schemeID = '0201'] | cac:PartyIdentification/cbc:ID[@schemeID = '0201'] | cbc:CompanyID[@schemeID = '0201']" mode="group.d2e163" priority="59"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:EndpointID[@schemeID = '0201'] | cac:PartyIdentification/cbc:ID[@schemeID = '0201'] | cbc:CompanyID[@schemeID = '0201']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:EndpointID[@schemeID = '0201'] | cac:PartyIdentification/cbc:ID[@schemeID = '0201'] | cbc:CompanyID[@schemeID = '0201']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(u:checkCodiceIPA(normalize-space()))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="PEPPOL-COMMON-R044" test="u:checkCodiceIPA(normalize-space())" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>IPA Code (Codice Univoco Unità Organizzativa) must be stated in the correct format</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:EndpointID[@schemeID = '0210'] | cac:PartyIdentification/cbc:ID[@schemeID = '0210'] | cbc:CompanyID[@schemeID = '0210']" mode="group.d2e163" priority="58"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:EndpointID[@schemeID = '0210'] | cac:PartyIdentification/cbc:ID[@schemeID = '0210'] | cbc:CompanyID[@schemeID = '0210']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:EndpointID[@schemeID = '0210'] | cac:PartyIdentification/cbc:ID[@schemeID = '0210'] | cbc:CompanyID[@schemeID = '0210']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(u:checkCF(normalize-space()))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="PEPPOL-COMMON-R045" test="u:checkCF(normalize-space())" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Tax Code (Codice Fiscale) must be stated in the correct format</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:EndpointID[@schemeID = '9907']" mode="group.d2e163" priority="57"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:EndpointID[@schemeID = '9907']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:EndpointID[@schemeID = '9907']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(u:checkCF(normalize-space()))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="PEPPOL-COMMON-R046" test="u:checkCF(normalize-space())" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Tax Code (Codice Fiscale) must be stated in the correct format</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:EndpointID[@schemeID = '0211'] | cac:PartyIdentification/cbc:ID[@schemeID = '0211'] | cbc:CompanyID[@schemeID = '0211']" mode="group.d2e163" priority="56"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:EndpointID[@schemeID = '0211'] | cac:PartyIdentification/cbc:ID[@schemeID = '0211'] | cbc:CompanyID[@schemeID = '0211']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:EndpointID[@schemeID = '0211'] | cac:PartyIdentification/cbc:ID[@schemeID = '0211'] | cbc:CompanyID[@schemeID = '0211']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(u:checkPIVAseIT(normalize-space()))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="PEPPOL-COMMON-R047" test="u:checkPIVAseIT(normalize-space())" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Italian VAT Code (Partita Iva) must be stated in the correct format</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:EndpointID[@schemeID = '0007'] | cac:PartyIdentification/cbc:ID[@schemeID = '0007'] | cbc:CompanyID[@schemeID = '0007']" mode="group.d2e163" priority="55"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:EndpointID[@schemeID = '0007'] | cac:PartyIdentification/cbc:ID[@schemeID = '0007'] | cbc:CompanyID[@schemeID = '0007']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:EndpointID[@schemeID = '0007'] | cac:PartyIdentification/cbc:ID[@schemeID = '0007'] | cbc:CompanyID[@schemeID = '0007']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(string-length(normalize-space()) = 10 and string(number(normalize-space())) != 'NaN')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-COMMON-R049" test="string-length(normalize-space()) = 10 and string(number(normalize-space())) != 'NaN'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Swedish organization number MUST be stated in the correct format.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:EndpointID[@schemeID = '0151'] | cac:PartyIdentification/cbc:ID[@schemeID = '0151'] | cbc:CompanyID[@schemeID = '0151']" mode="group.d2e163" priority="54"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e184' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:EndpointID[@schemeID = '0151'] | cac:PartyIdentification/cbc:ID[@schemeID = '0151'] | cbc:CompanyID[@schemeID = '0151']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:EndpointID[@schemeID = '0151'] | cac:PartyIdentification/cbc:ID[@schemeID = '0151'] | cbc:CompanyID[@schemeID = '0151']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(matches(normalize-space(), '^[0-9]{11}$') and u:abn(normalize-space()))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-COMMON-R050" test="matches(normalize-space(), '^[0-9]{11}$') and u:abn(normalize-space())" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Australian Business Number (ABN) MUST be stated in the correct format.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e184', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingSupplierParty/cac:Party[$supplierCountry = 'NO']" mode="group.d2e163" priority="53"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e416' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingSupplierParty/cac:Party[$supplierCountry = 'NO']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingSupplierParty/cac:Party[$supplierCountry = 'NO']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(normalize-space(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'TAX']/cbc:CompanyID) = 'Foretaksregisteret')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="NO-R-002" test="normalize-space(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'TAX']/cbc:CompanyID) = 'Foretaksregisteret'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Norwegian suppliers, most invoice issuers are required to append "Foretaksregisteret" to their
        invoice. "Dersom selger er aksjeselskap, allmennaksjeselskap eller filial av utenlandsk
        selskap skal også ordet «Foretaksregisteret» fremgå av salgsdokumentet, jf.
        foretaksregisterloven § 10-2."</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/substring(cbc:CompanyID, 1, 2)='NO' and matches(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/substring(cbc:CompanyID,3), '^[0-9]{9}MVA$')           and u:mod11(substring(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID, 3, 9)) or not(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/substring(cbc:CompanyID, 1, 2)='NO'))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="NO-R-001" test="cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/substring(cbc:CompanyID, 1, 2)='NO' and matches(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/substring(cbc:CompanyID,3), '^[0-9]{9}MVA$')           and u:mod11(substring(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID, 3, 9)) or not(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/substring(cbc:CompanyID, 1, 2)='NO')" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Norwegian suppliers, a VAT number MUST be the country code prefix NO followed by a valid Norwegian organization number (nine numbers) followed by the letters MVA.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e416', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="ubl-creditnote:CreditNote[$DKSupplierCountry = 'DK'] | ubl-invoice:Invoice[$DKSupplierCountry = 'DK']" mode="group.d2e163" priority="52"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e432' = $schxslt:pattern"><svrl:suppressed-rule context="ubl-creditnote:CreditNote[$DKSupplierCountry = 'DK'] | ubl-invoice:Invoice[$DKSupplierCountry = 'DK']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="ubl-creditnote:CreditNote[$DKSupplierCountry = 'DK'] | ubl-invoice:Invoice[$DKSupplierCountry = 'DK']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not((normalize-space(cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID/text()) != ''))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="DK-R-002" test="(normalize-space(cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID/text()) != '')" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Danish suppliers MUST provide legal entity (CVR-number)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(not(((boolean(cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID))           and (normalize-space(cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID/@schemeID) != '0184'))       ))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="DK-R-014" test="not(((boolean(cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID))           and (normalize-space(cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID/@schemeID) != '0184'))       )" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Danish Suppliers it is mandatory to specify schemeID as "0184" (DK CVR-number) when PartyLegalEntity/CompanyID is used for AccountingSupplierParty</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(not((boolean(/ubl-creditnote:CreditNote) and ($DKCustomerCountry = 'DK'))       and (number(cac:LegalMonetaryTotal/cbc:PayableAmount/text()) &lt; 0)       ))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="DK-R-016" test="not((boolean(/ubl-creditnote:CreditNote) and ($DKCustomerCountry = 'DK'))       and (number(cac:LegalMonetaryTotal/cbc:PayableAmount/text()) &lt; 0)       )" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Danish Suppliers, a Credit note cannot have a negative total (PayableAmount)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e432', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="ubl-creditnote:CreditNote[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:AccountingSupplierParty/cac:Party/cac:PartyIdentification | ubl-creditnote:CreditNote[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:AccountingCustomerParty/cac:Party/cac:PartyIdentification | ubl-invoice:Invoice[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:AccountingSupplierParty/cac:Party/cac:PartyIdentification | ubl-invoice:Invoice[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:AccountingCustomerParty/cac:Party/cac:PartyIdentification" mode="group.d2e163" priority="51"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e432' = $schxslt:pattern"><svrl:suppressed-rule context="ubl-creditnote:CreditNote[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:AccountingSupplierParty/cac:Party/cac:PartyIdentification | ubl-creditnote:CreditNote[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:AccountingCustomerParty/cac:Party/cac:PartyIdentification | ubl-invoice:Invoice[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:AccountingSupplierParty/cac:Party/cac:PartyIdentification | ubl-invoice:Invoice[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:AccountingCustomerParty/cac:Party/cac:PartyIdentification"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="ubl-creditnote:CreditNote[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:AccountingSupplierParty/cac:Party/cac:PartyIdentification | ubl-creditnote:CreditNote[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:AccountingCustomerParty/cac:Party/cac:PartyIdentification | ubl-invoice:Invoice[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:AccountingSupplierParty/cac:Party/cac:PartyIdentification | ubl-invoice:Invoice[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:AccountingCustomerParty/cac:Party/cac:PartyIdentification"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(not((boolean(cbc:ID))        and (normalize-space(cbc:ID/@schemeID) = '')       ))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="DK-R-013" test="not((boolean(cbc:ID))        and (normalize-space(cbc:ID/@schemeID) = '')       )" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Danish Suppliers it is mandatory to use schemeID when PartyIdentification/ID is used for AccountingCustomerParty or AccountingSupplierParty</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e432', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="ubl-invoice:Invoice[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:PaymentMeans" mode="group.d2e163" priority="50"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e432' = $schxslt:pattern"><svrl:suppressed-rule context="ubl-invoice:Invoice[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:PaymentMeans"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="ubl-invoice:Invoice[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:PaymentMeans"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(contains(' 1 10 31 42 48 49 50 58 59 93 97 ', concat(' ', cbc:PaymentMeansCode, ' ')))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="DK-R-005" test="contains(' 1 10 31 42 48 49 50 58 59 93 97 ', concat(' ', cbc:PaymentMeansCode, ' '))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Danish suppliers the following Payment means codes are allowed: 1, 10, 31, 42, 48, 49, 50, 58, 59, 93 and 97</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(not(((cbc:PaymentMeansCode = '31') or (cbc:PaymentMeansCode = '42'))       and not((normalize-space(cac:PayeeFinancialAccount/cbc:ID/text()) != '') and (normalize-space(cac:PayeeFinancialAccount/cac:FinancialInstitutionBranch/cbc:ID/text()) != ''))       ))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="DK-R-006" test="not(((cbc:PaymentMeansCode = '31') or (cbc:PaymentMeansCode = '42'))       and not((normalize-space(cac:PayeeFinancialAccount/cbc:ID/text()) != '') and (normalize-space(cac:PayeeFinancialAccount/cac:FinancialInstitutionBranch/cbc:ID/text()) != ''))       )" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Danish suppliers bank account and registration account is mandatory if payment means is 31 or 42</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(not((cbc:PaymentMeansCode = '49')       and not((normalize-space(cac:PaymentMandate/cbc:ID/text()) != '')           and (normalize-space(cac:PaymentMandate/cac:PayerFinancialAccount/cbc:ID/text()) != ''))       ))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="DK-R-007" test="not((cbc:PaymentMeansCode = '49')       and not((normalize-space(cac:PaymentMandate/cbc:ID/text()) != '')           and (normalize-space(cac:PaymentMandate/cac:PayerFinancialAccount/cbc:ID/text()) != ''))       )" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Danish suppliers PaymentMandate/ID and PayerFinancialAccount/ID are mandatory when payment means is 49</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(not((cbc:PaymentMeansCode = '50')       and not(((substring(cbc:PaymentID, 1, 3) = '01#')           or (substring(cbc:PaymentID, 1, 3) = '04#')           or (substring(cbc:PaymentID, 1, 3) = '15#'))         and (string-length(cac:PayeeFinancialAccount/cbc:ID/text()) = 7)         )       ))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="DK-R-008" test="not((cbc:PaymentMeansCode = '50')       and not(((substring(cbc:PaymentID, 1, 3) = '01#')           or (substring(cbc:PaymentID, 1, 3) = '04#')           or (substring(cbc:PaymentID, 1, 3) = '15#'))         and (string-length(cac:PayeeFinancialAccount/cbc:ID/text()) = 7)         )       )" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Danish Suppliers PaymentID is mandatory and MUST start with 01#, 04# or 15# (kortartkode), and PayeeFinancialAccount/ID (Giro kontonummer) is mandatory and must be 7 characters long, when payment means equals 50 (Giro)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(not((cbc:PaymentMeansCode = '50')       and ((substring(cbc:PaymentID, 1, 3) = '04#')          or (substring(cbc:PaymentID, 1, 3)  = '15#'))       and not(string-length(cbc:PaymentID) = 19)       ))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="DK-R-009" test="not((cbc:PaymentMeansCode = '50')       and ((substring(cbc:PaymentID, 1, 3) = '04#')          or (substring(cbc:PaymentID, 1, 3)  = '15#'))       and not(string-length(cbc:PaymentID) = 19)       )" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Danish Suppliers if the PaymentID is prefixed with 04# or 15# the 16 digits instruction Id must be added to the PaymentID eg. "04#1234567890123456" when Payment means equals 50 (Giro)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(not((cbc:PaymentMeansCode = '93')       and not(((substring(cbc:PaymentID, 1, 3) = '71#')           or (substring(cbc:PaymentID, 1, 3) = '73#')           or (substring(cbc:PaymentID, 1, 3) = '75#'))         and (string-length(cac:PayeeFinancialAccount/cbc:ID/text()) = 8)         )       ))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="DK-R-010" test="not((cbc:PaymentMeansCode = '93')       and not(((substring(cbc:PaymentID, 1, 3) = '71#')           or (substring(cbc:PaymentID, 1, 3) = '73#')           or (substring(cbc:PaymentID, 1, 3) = '75#'))         and (string-length(cac:PayeeFinancialAccount/cbc:ID/text()) = 8)         )       )" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Danish Suppliers the PaymentID is mandatory and MUST start with 71#, 73# or 75# (kortartkode) and PayeeFinancialAccount/ID (Kreditornummer) is mandatory and must be exactly 8 characters long, when Payment means equals 93 (FIK)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(not((cbc:PaymentMeansCode = '93')       and ((substring(cbc:PaymentID, 1, 3) = '71#')          or (substring(cbc:PaymentID, 1, 3)  = '75#'))       and not((string-length(cbc:PaymentID) = 18)          or (string-length(cbc:PaymentID) = 19))       ))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="DK-R-011" test="not((cbc:PaymentMeansCode = '93')       and ((substring(cbc:PaymentID, 1, 3) = '71#')          or (substring(cbc:PaymentID, 1, 3)  = '75#'))       and not((string-length(cbc:PaymentID) = 18)          or (string-length(cbc:PaymentID) = 19))       )" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Danish Suppliers if the PaymentID is prefixed with 71# or 75# the 15-16 digits instruction Id must be added to the PaymentID eg. "71#1234567890123456" when payment Method equals 93 (FIK)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e432', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="ubl-creditnote:CreditNote[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:CreditNoteLine | ubl-invoice:Invoice[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:InvoiceLine" mode="group.d2e163" priority="49"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e432' = $schxslt:pattern"><svrl:suppressed-rule context="ubl-creditnote:CreditNote[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:CreditNoteLine | ubl-invoice:Invoice[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:InvoiceLine"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="ubl-creditnote:CreditNote[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:CreditNoteLine | ubl-invoice:Invoice[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']/cac:InvoiceLine"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(not((cac:Item/cac:CommodityClassification/cbc:ItemClassificationCode/@listID = 'TST')       and not((cac:Item/cac:CommodityClassification/cbc:ItemClassificationCode/@listVersionID = '19.05.01')           or (cac:Item/cac:CommodityClassification/cbc:ItemClassificationCode/@listVersionID = '19.0501')           )       ))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="DK-R-003" test="not((cac:Item/cac:CommodityClassification/cbc:ItemClassificationCode/@listID = 'TST')       and not((cac:Item/cac:CommodityClassification/cbc:ItemClassificationCode/@listVersionID = '19.05.01')           or (cac:Item/cac:CommodityClassification/cbc:ItemClassificationCode/@listVersionID = '19.0501')           )       )" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>If ItemClassification is provided from Danish suppliers, UNSPSC version 19.0501 should be used.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e432', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AllowanceCharge[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']" mode="group.d2e163" priority="48"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e432' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AllowanceCharge[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AllowanceCharge[$DKSupplierCountry = 'DK' and $DKCustomerCountry = 'DK']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(not((cbc:AllowanceChargeReasonCode = 'ZZZ')       and not((string-length(normalize-space(cbc:AllowanceChargeReason/text())) = 4)         and (number(cbc:AllowanceChargeReason) &gt;= 0)         and (number(cbc:AllowanceChargeReason) &lt;= 9999))       ))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="DK-R-004" test="not((cbc:AllowanceChargeReasonCode = 'ZZZ')       and not((string-length(normalize-space(cbc:AllowanceChargeReason/text())) = 4)         and (number(cbc:AllowanceChargeReason) &gt;= 0)         and (number(cbc:AllowanceChargeReason) &lt;= 9999))       )" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>When specifying non-VAT Taxes for Danish customers, Danish suppliers MUST use the AllowanceChargeReasonCode="ZZZ" and the 4-digit Tax category MUST be specified in AllowanceChargeReason</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e432', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingSupplierParty/cac:Party[$supplierCountry = 'IT']/cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) != 'VAT']" mode="group.d2e163" priority="47"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e504' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingSupplierParty/cac:Party[$supplierCountry = 'IT']/cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) != 'VAT']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingSupplierParty/cac:Party[$supplierCountry = 'IT']/cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) != 'VAT']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(matches(normalize-space(cbc:CompanyID),'^[A-Z0-9]{11,16}$'))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="IT-R-001" test="matches(normalize-space(cbc:CompanyID),'^[A-Z0-9]{11,16}$')" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[IT-R-001] BT-32 (Seller tax registration identifier) - For Italian suppliers BT-32 minimum length 11 and maximum length shall be 16.  Per i fornitori italiani il BT-32 deve avere una lunghezza tra 11 e 16 caratteri</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e504', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingSupplierParty/cac:Party[$supplierCountry = 'IT']" mode="group.d2e163" priority="46"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e504' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingSupplierParty/cac:Party[$supplierCountry = 'IT']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingSupplierParty/cac:Party[$supplierCountry = 'IT']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(cac:PostalAddress/cbc:StreetName)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="IT-R-002" test="cac:PostalAddress/cbc:StreetName" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[IT-R-002] BT-35 (Seller address line 1) - Italian suppliers MUST provide the postal address line 1 - I fornitori italiani devono indicare l'indirizzo postale.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(cac:PostalAddress/cbc:CityName)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="IT-R-003" test="cac:PostalAddress/cbc:CityName" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[IT-R-003] BT-37 (Seller city) - Italian suppliers MUST provide the postal address city - I fornitori italiani devono indicare la città di residenza.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(cac:PostalAddress/cbc:PostalZone)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="IT-R-004" test="cac:PostalAddress/cbc:PostalZone" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>"&gt;[IT-R-004] BT-38 (Seller post code) - Italian suppliers MUST provide the postal address post code - I fornitori italiani devono indicare il CAP di residenza.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e504', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2) = 'SE']" mode="group.d2e163" priority="45"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e527' = $schxslt:pattern"><svrl:suppressed-rule context="//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2) = 'SE']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2) = 'SE']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(string-length(normalize-space(cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/cbc:CompanyID)) = 14)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SE-R-001" test="string-length(normalize-space(cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/cbc:CompanyID)) = 14" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Swedish suppliers, Swedish VAT-numbers must consist of 14 characters.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(string(number(substring(cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/cbc:CompanyID, 3, 12))) != 'NaN')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SE-R-002" test="string(number(substring(cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/cbc:CompanyID, 3, 12))) != 'NaN'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Swedish suppliers, the Swedish VAT-numbers must have the trailing 12 characters in numeric form</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e527', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="//cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity[../cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and cbc:CompanyID]" mode="group.d2e163" priority="44"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e527' = $schxslt:pattern"><svrl:suppressed-rule context="//cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity[../cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and cbc:CompanyID]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="//cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity[../cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and cbc:CompanyID]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(string(number(cbc:CompanyID)) != 'NaN')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="SE-R-003" test="string(number(cbc:CompanyID)) != 'NaN'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Swedish organisation numbers should be numeric.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(string-length(normalize-space(cbc:CompanyID)) = 10)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="SE-R-004" test="string-length(normalize-space(cbc:CompanyID)) = 10" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Swedish organisation numbers consist of 10 characters.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e527', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and exists(cac:PartyLegalEntity/cbc:CompanyID)]/cac:PartyTaxScheme[normalize-space(upper-case(cac:TaxScheme/cbc:ID)) != 'VAT']/cbc:CompanyID" mode="group.d2e163" priority="43"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e527' = $schxslt:pattern"><svrl:suppressed-rule context="//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and exists(cac:PartyLegalEntity/cbc:CompanyID)]/cac:PartyTaxScheme[normalize-space(upper-case(cac:TaxScheme/cbc:ID)) != 'VAT']/cbc:CompanyID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and exists(cac:PartyLegalEntity/cbc:CompanyID)]/cac:PartyTaxScheme[normalize-space(upper-case(cac:TaxScheme/cbc:ID)) != 'VAT']/cbc:CompanyID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(normalize-space(upper-case(.)) = 'GODKÄND FÖR F-SKATT')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SE-R-005" test="normalize-space(upper-case(.)) = 'GODKÄND FÖR F-SKATT'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Swedish suppliers, when using Seller tax registration identifier, 'Godkänd för F-skatt' must be stated</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e527', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="//cac:TaxCategory[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2) = 'SE'] and cbc:ID = 'S'] | //cac:ClassifiedTaxCategory[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2) = 'SE'] and cbc:ID = 'S']" mode="group.d2e163" priority="42"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e527' = $schxslt:pattern"><svrl:suppressed-rule context="//cac:TaxCategory[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2) = 'SE'] and cbc:ID = 'S'] | //cac:ClassifiedTaxCategory[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2) = 'SE'] and cbc:ID = 'S']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="//cac:TaxCategory[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2) = 'SE'] and cbc:ID = 'S'] | //cac:ClassifiedTaxCategory[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE' and cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 1, 2) = 'SE'] and cbc:ID = 'S']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(number(cbc:Percent) = 25 or number(cbc:Percent) = 12 or number(cbc:Percent) = 6)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="SE-R-006" test="number(cbc:Percent) = 25 or number(cbc:Percent) = 12 or number(cbc:Percent) = 6" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Swedish suppliers, only standard VAT rate of 6, 12 or 25 are used</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e527', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="//cac:PaymentMeans[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE'] and normalize-space(cbc:PaymentMeansCode) = '30' and normalize-space(cac:PayeeFinancialAccount/cac:FinancialInstitutionBranch/cbc:ID) = 'SE:PLUSGIRO']/cac:PayeeFinancialAccount/cbc:ID" mode="group.d2e163" priority="41"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e527' = $schxslt:pattern"><svrl:suppressed-rule context="//cac:PaymentMeans[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE'] and normalize-space(cbc:PaymentMeansCode) = '30' and normalize-space(cac:PayeeFinancialAccount/cac:FinancialInstitutionBranch/cbc:ID) = 'SE:PLUSGIRO']/cac:PayeeFinancialAccount/cbc:ID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="//cac:PaymentMeans[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE'] and normalize-space(cbc:PaymentMeansCode) = '30' and normalize-space(cac:PayeeFinancialAccount/cac:FinancialInstitutionBranch/cbc:ID) = 'SE:PLUSGIRO']/cac:PayeeFinancialAccount/cbc:ID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(string(number(normalize-space(.))) != 'NaN')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="SE-R-007" test="string(number(normalize-space(.))) != 'NaN'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Swedish suppliers using Plusgiro, the Account ID must be numeric </svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(string-length(normalize-space(.)) &gt;= 2 and string-length(normalize-space(.)) &lt;= 8)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="SE-R-010" test="string-length(normalize-space(.)) &gt;= 2 and string-length(normalize-space(.)) &lt;= 8" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Swedish suppliers using Plusgiro, the Account ID must have 2-8 characters</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e527', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="//cac:PaymentMeans[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE'] and normalize-space(cbc:PaymentMeansCode) = '30' and normalize-space(cac:PayeeFinancialAccount/cac:FinancialInstitutionBranch/cbc:ID) = 'SE:BANKGIRO']/cac:PayeeFinancialAccount/cbc:ID" mode="group.d2e163" priority="40"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e527' = $schxslt:pattern"><svrl:suppressed-rule context="//cac:PaymentMeans[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE'] and normalize-space(cbc:PaymentMeansCode) = '30' and normalize-space(cac:PayeeFinancialAccount/cac:FinancialInstitutionBranch/cbc:ID) = 'SE:BANKGIRO']/cac:PayeeFinancialAccount/cbc:ID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="//cac:PaymentMeans[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE'] and normalize-space(cbc:PaymentMeansCode) = '30' and normalize-space(cac:PayeeFinancialAccount/cac:FinancialInstitutionBranch/cbc:ID) = 'SE:BANKGIRO']/cac:PayeeFinancialAccount/cbc:ID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(string(number(normalize-space(.))) != 'NaN')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="SE-R-008" test="string(number(normalize-space(.))) != 'NaN'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Swedish suppliers using Bankgiro, the Account ID must be numeric </svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(string-length(normalize-space(.)) = 7 or string-length(normalize-space(.)) = 8)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="SE-R-009" test="string-length(normalize-space(.)) = 7 or string-length(normalize-space(.)) = 8" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Swedish suppliers using Bankgiro, the Account ID must have 7-8 characters</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e527', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="//cac:PaymentMeans[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE'] and (cbc:PaymentMeansCode = normalize-space('50') or cbc:PaymentMeansCode = normalize-space('56'))]" mode="group.d2e163" priority="39"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e527' = $schxslt:pattern"><svrl:suppressed-rule context="//cac:PaymentMeans[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE'] and (cbc:PaymentMeansCode = normalize-space('50') or cbc:PaymentMeansCode = normalize-space('56'))]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="//cac:PaymentMeans[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE'] and (cbc:PaymentMeansCode = normalize-space('50') or cbc:PaymentMeansCode = normalize-space('56'))]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(false())"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="SE-R-011" test="false()" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For Swedish suppliers using Swedish Bankgiro or Plusgiro, the proper way to indicate this is to use Code 30 for PaymentMeans and FinancialInstitutionBranch ID with code SE:BANKGIRO or SE:PLUSGIRO</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e527', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="//cac:PaymentMeans[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE']  and //cac:AccountingCustomerParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE'] and (cbc:PaymentMeansCode = normalize-space('31'))]" mode="group.d2e163" priority="38"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e527' = $schxslt:pattern"><svrl:suppressed-rule context="//cac:PaymentMeans[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE']  and //cac:AccountingCustomerParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE'] and (cbc:PaymentMeansCode = normalize-space('31'))]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="//cac:PaymentMeans[//cac:AccountingSupplierParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE']  and //cac:AccountingCustomerParty/cac:Party[cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'SE'] and (cbc:PaymentMeansCode = normalize-space('31'))]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(false())"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="SE-R-012" test="false()" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For domestic transactions between Swedish trading partners, credit transfer should be indicated by PaymentMeansCode="30"</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e527', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/ubl-invoice:Invoice/cbc:ID[$isGreekSender] | /ubl-creditnote:CreditNote/cbc:ID[$isGreekSender]" mode="group.d2e163" priority="37"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e608' = $schxslt:pattern"><svrl:suppressed-rule context="/ubl-invoice:Invoice/cbc:ID[$isGreekSender] | /ubl-creditnote:CreditNote/cbc:ID[$isGreekSender]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/ubl-invoice:Invoice/cbc:ID[$isGreekSender] | /ubl-creditnote:CreditNote/cbc:ID[$isGreekSender]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:variable name="IdSegments" select="tokenize(.,'\|')"/><xsl:variable name="tokenizedIdDate" select="tokenize($IdSegments[2],'/')"/><xsl:if test="not(count($IdSegments) = 6)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-001-1" test="count($IdSegments) = 6" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text> When the Supplier is Greek, the Invoice Id should consist of 6 segments</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(string-length(normalize-space($IdSegments[1])) = 9                                   and u:TinVerification($IdSegments[1])                                  and ($IdSegments[1] = /*/cac:AccountingSupplierParty/cac:Party/cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 3, 9)                                  or $IdSegments[1] = /*/cac:TaxRepresentativeParty/cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 3, 9) ))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-001-2" test="string-length(normalize-space($IdSegments[1])) = 9                                   and u:TinVerification($IdSegments[1])                                  and ($IdSegments[1] = /*/cac:AccountingSupplierParty/cac:Party/cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 3, 9)                                  or $IdSegments[1] = /*/cac:TaxRepresentativeParty/cac:PartyTaxScheme[cac:TaxScheme/cbc:ID = 'VAT']/substring(cbc:CompanyID, 3, 9) )" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>When the Supplier is Greek, the Invoice Id first segment must be a valid TIN Number and match either the Supplier's or the Tax Representative's Tin Number</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(string-length(normalize-space($IdSegments[2]))&gt;0                                   and matches($IdSegments[2],$dateRegExp)                                  and ($tokenizedIdDate[1] = $tokenizedUblIssueDate[3]                                     and $tokenizedIdDate[2] = $tokenizedUblIssueDate[2]                                    and $tokenizedIdDate[3] = $tokenizedUblIssueDate[1]))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-001-3" test="string-length(normalize-space($IdSegments[2]))&gt;0                                   and matches($IdSegments[2],$dateRegExp)                                  and ($tokenizedIdDate[1] = $tokenizedUblIssueDate[3]                                     and $tokenizedIdDate[2] = $tokenizedUblIssueDate[2]                                    and $tokenizedIdDate[3] = $tokenizedUblIssueDate[1])" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>When the Supplier is Greek, the Invoice Id second segment must be a valid Date that matches the invoice Issue Date</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(string-length(normalize-space($IdSegments[3]))&gt;0 and string(number($IdSegments[3])) != 'NaN' and xs:integer($IdSegments[3]) &gt;= 0)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-001-4" test="string-length(normalize-space($IdSegments[3]))&gt;0 and string(number($IdSegments[3])) != 'NaN' and xs:integer($IdSegments[3]) &gt;= 0" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>When Supplier is Greek, the Invoice Id third segment must be a positive integer</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(string-length(normalize-space($IdSegments[4]))&gt;0 and (some $c in $greekDocumentType satisfies $IdSegments[4] = $c))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-001-5" test="string-length(normalize-space($IdSegments[4]))&gt;0 and (some $c in $greekDocumentType satisfies $IdSegments[4] = $c)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>When Supplier is Greek, the Invoice Id in the fourth segment must be a valid greek document type</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(string-length($IdSegments[5]) &gt; 0 )"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-001-6" test="string-length($IdSegments[5]) &gt; 0 " xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>When Supplier is Greek, the Invoice Id fifth segment must not be empty</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(string-length($IdSegments[6]) &gt; 0 )"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-001-7" test="string-length($IdSegments[6]) &gt; 0 " xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>When Supplier is Greek, the Invoice Id sixth segment must not be empty</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e608', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingSupplierParty[$isGreekSender]/cac:Party" mode="group.d2e163" priority="36"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e608' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingSupplierParty[$isGreekSender]/cac:Party"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingSupplierParty[$isGreekSender]/cac:Party"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(string-length(./cac:PartyName/cbc:Name)&gt;0)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-002" test="string-length(./cac:PartyName/cbc:Name)&gt;0" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Greek Suppliers must provide their full name as they are registered in the  Greek Business Registry (G.E.MH.) as a legal entity or in the Tax Registry as a natural person </svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID)=1 and                             substring(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID,1,2) = 'EL' and                             u:TinVerification(substring(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID,3)))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="GR-S-011" test="count(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID)=1 and                             substring(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID,1,2) = 'EL' and                             u:TinVerification(substring(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID,3))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Greek suppliers must provide their Seller Tax Registration Number, prefixed by the country code</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e608', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingSupplierParty[$isGreekSender]/cac:Party/cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID" mode="group.d2e163" priority="35"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e608' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingSupplierParty[$isGreekSender]/cac:Party/cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingSupplierParty[$isGreekSender]/cac:Party/cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(substring(.,1,2) = 'EL' and u:TinVerification(substring(.,3)))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-003" test="substring(.,1,2) = 'EL' and u:TinVerification(substring(.,3))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>For the Greek Suppliers, the VAT must start with 'EL' and must be a valid TIN number</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e608', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="/ubl-invoice:Invoice[$isGreekSender and ( /*/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'GR')] | /ubl-creditnote:CreditNote[$isGreekSender and ( /*/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'GR')]" mode="group.d2e163" priority="34"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e608' = $schxslt:pattern"><svrl:suppressed-rule context="/ubl-invoice:Invoice[$isGreekSender and ( /*/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'GR')] | /ubl-creditnote:CreditNote[$isGreekSender and ( /*/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'GR')]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="/ubl-invoice:Invoice[$isGreekSender and ( /*/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'GR')] | /ubl-creditnote:CreditNote[$isGreekSender and ( /*/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'GR')]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(count(cac:AdditionalDocumentReference[cbc:DocumentDescription = '##M.AR.K##'])=1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-004-1" test="count(cac:AdditionalDocumentReference[cbc:DocumentDescription = '##M.AR.K##'])=1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text> When Supplier is Greek, there must be one MARK Number</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(count(cac:AdditionalDocumentReference[cbc:DocumentDescription = '##INVOICE|URL##'])=1)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="GR-S-008-1" test="count(cac:AdditionalDocumentReference[cbc:DocumentDescription = '##INVOICE|URL##'])=1" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text> When Supplier is Greek, there should be one invoice url</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not((count(cac:AdditionalDocumentReference[cbc:DocumentDescription = '##INVOICE|URL##']) = 0 ) or (count(cac:AdditionalDocumentReference[cbc:DocumentDescription = '##INVOICE|URL##']) = 1 ))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-008-2" test="(count(cac:AdditionalDocumentReference[cbc:DocumentDescription = '##INVOICE|URL##']) = 0 ) or (count(cac:AdditionalDocumentReference[cbc:DocumentDescription = '##INVOICE|URL##']) = 1 )" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text> When Supplier is Greek, there should be no more than one invoice url</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e608', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AdditionalDocumentReference[$isGreekSender and ( /*/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'GR') and cbc:DocumentDescription = '##M.AR.K##']/cbc:ID" mode="group.d2e163" priority="33"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e608' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AdditionalDocumentReference[$isGreekSender and ( /*/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'GR') and cbc:DocumentDescription = '##M.AR.K##']/cbc:ID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AdditionalDocumentReference[$isGreekSender and ( /*/cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cac:Country/cbc:IdentificationCode = 'GR') and cbc:DocumentDescription = '##M.AR.K##']/cbc:ID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(matches(.,'^[1-9]([0-9]*)'))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-004-2" test="matches(.,'^[1-9]([0-9]*)')" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text> When Supplier is Greek, the MARK Number must be a positive integer</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e608', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AdditionalDocumentReference[$isGreekSender and cbc:DocumentDescription = '##INVOICE|URL##']" mode="group.d2e163" priority="32"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e608' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AdditionalDocumentReference[$isGreekSender and cbc:DocumentDescription = '##INVOICE|URL##']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AdditionalDocumentReference[$isGreekSender and cbc:DocumentDescription = '##INVOICE|URL##']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(string-length(normalize-space(cac:Attachment/cac:ExternalReference/cbc:URI))&gt;0)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-008-3" test="string-length(normalize-space(cac:Attachment/cac:ExternalReference/cbc:URI))&gt;0" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>When Supplier is Greek and the INVOICE URL Document reference exists, the External Reference URI should be present</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e608', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingCustomerParty[$isGreekSender]/cac:Party" mode="group.d2e163" priority="31"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e608' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingCustomerParty[$isGreekSender]/cac:Party"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingCustomerParty[$isGreekSender]/cac:Party"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(string-length(./cac:PartyName/cbc:Name)&gt;0)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-005" test="string-length(./cac:PartyName/cbc:Name)&gt;0" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Greek Suppliers must provide the full name of the buyer</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e608', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingSupplierParty/cac:Party[$accountingSupplierCountry='GR' or $accountingSupplierCountry='EL']/cbc:EndpointID" mode="group.d2e163" priority="30"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e608' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingSupplierParty/cac:Party[$accountingSupplierCountry='GR' or $accountingSupplierCountry='EL']/cbc:EndpointID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingSupplierParty/cac:Party[$accountingSupplierCountry='GR' or $accountingSupplierCountry='EL']/cbc:EndpointID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(./@schemeID='9933' and u:TinVerification(.))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-009" test="./@schemeID='9933' and u:TinVerification(.)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Greek suppliers that send an invoice through the PEPPOL network must use a correct TIN number as an electronic address according to PEPPOL Electronic Address Identifier scheme (schemeID 9933).</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e608', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingCustomerParty[$isGreekSenderandReceiver]/cac:Party" mode="group.d2e163" priority="29"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e723' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingCustomerParty[$isGreekSenderandReceiver]/cac:Party"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingCustomerParty[$isGreekSenderandReceiver]/cac:Party"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(count(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID)=1 and                             substring(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID,1,2) = 'EL' and                             u:TinVerification(substring(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID,3)))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-006" test="count(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID)=1 and                             substring(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID,1,2) = 'EL' and                             u:TinVerification(substring(cac:PartyTaxScheme[normalize-space(cac:TaxScheme/cbc:ID) = 'VAT']/cbc:CompanyID,3))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Greek Suppliers must provide the VAT number of the buyer, if the buyer is Greek </svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e723', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingCustomerParty[$isGreekSenderandReceiver]/cac:Party/cbc:EndpointID" mode="group.d2e163" priority="28"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e723' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingCustomerParty[$isGreekSenderandReceiver]/cac:Party/cbc:EndpointID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingCustomerParty[$isGreekSenderandReceiver]/cac:Party/cbc:EndpointID"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(./@schemeID='9933' and u:TinVerification(.))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="GR-R-010" test="./@schemeID='9933' and u:TinVerification(.)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Greek Suppliers that send an invoice through the PEPPOL network to a greek buyer must use a correct TIN number as an electronic address according to PEPPOL Electronic Address Identifier scheme (SchemeID 9933)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e723', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="ubl-creditnote:CreditNote[$SupplierCountry = 'IS'] | ubl-invoice:Invoice[$SupplierCountry = 'IS']" mode="group.d2e163" priority="27"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e744' = $schxslt:pattern"><svrl:suppressed-rule context="ubl-creditnote:CreditNote[$SupplierCountry = 'IS'] | ubl-invoice:Invoice[$SupplierCountry = 'IS']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="ubl-creditnote:CreditNote[$SupplierCountry = 'IS'] | ubl-invoice:Invoice[$SupplierCountry = 'IS']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(( ( not(contains(normalize-space(cbc:InvoiceTypeCode),' ')) and contains( ' 380 381 ',concat(' ',normalize-space(cbc:InvoiceTypeCode),' ') ) ) ) or ( ( not(contains(normalize-space(cbc:CreditNoteTypeCode),' ')) and contains( ' 380 381 ',concat(' ',normalize-space(cbc:CreditNoteTypeCode),' ') ) ) ))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="warning" id="IS-R-001" test="( ( not(contains(normalize-space(cbc:InvoiceTypeCode),' ')) and contains( ' 380 381 ',concat(' ',normalize-space(cbc:InvoiceTypeCode),' ') ) ) ) or ( ( not(contains(normalize-space(cbc:CreditNoteTypeCode),' ')) and contains( ' 380 381 ',concat(' ',normalize-space(cbc:CreditNoteTypeCode),' ') ) ) )" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[IS-R-001]-If seller is icelandic then invoice type should be 380 or 381 — Ef seljandi er íslenskur þá ætti gerð reiknings (BT-3) að vera sölureikningur (380) eða kreditreikningur (381).</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(exists(cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID) and cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID/@schemeID = '0196')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="IS-R-002" test="exists(cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID) and cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID/@schemeID = '0196'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[IS-R-002]-If seller is icelandic then it shall contain sellers legal id — Ef seljandi er íslenskur þá skal reikningur innihalda íslenska kennitölu seljanda (BT-30).</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(exists(cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cbc:StreetName) and exists(cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cbc:PostalZone))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="IS-R-003" test="exists(cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cbc:StreetName) and exists(cac:AccountingSupplierParty/cac:Party/cac:PostalAddress/cbc:PostalZone)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[IS-R-003]-If seller is icelandic then it shall contain his address with street name and zip code — Ef seljandi er íslenskur þá skal heimilisfang seljanda innihalda götuheiti og póstnúmer (BT-35 og BT-38).</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(exists(cac:PaymentMeans[cbc:PaymentMeansCode = '9']/cac:PayeeFinancialAccount/cbc:ID)         and string-length(normalize-space(cac:PaymentMeans[cbc:PaymentMeansCode = '9']/cac:PayeeFinancialAccount/cbc:ID)) = 12        or not(exists(cac:PaymentMeans[cbc:PaymentMeansCode = '9'])))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="IS-R-006" test="exists(cac:PaymentMeans[cbc:PaymentMeansCode = '9']/cac:PayeeFinancialAccount/cbc:ID)         and string-length(normalize-space(cac:PaymentMeans[cbc:PaymentMeansCode = '9']/cac:PayeeFinancialAccount/cbc:ID)) = 12        or not(exists(cac:PaymentMeans[cbc:PaymentMeansCode = '9']))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[IS-R-006]-If seller is icelandic and payment means code is 9 then a 12 digit account id must exist — Ef seljandi er íslenskur og greiðslumáti (BT-81) er krafa (kóti 9) þá skal koma fram 12 stafa númer (bankanúmer, höfuðbók 66 og reikningsnúmer) (BT-84)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(exists(cac:PaymentMeans[cbc:PaymentMeansCode = '42']/cac:PayeeFinancialAccount/cbc:ID)         and string-length(normalize-space(cac:PaymentMeans[cbc:PaymentMeansCode = '42']/cac:PayeeFinancialAccount/cbc:ID)) = 12        or not(exists(cac:PaymentMeans[cbc:PaymentMeansCode = '42'])))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="IS-R-007" test="exists(cac:PaymentMeans[cbc:PaymentMeansCode = '42']/cac:PayeeFinancialAccount/cbc:ID)         and string-length(normalize-space(cac:PaymentMeans[cbc:PaymentMeansCode = '42']/cac:PayeeFinancialAccount/cbc:ID)) = 12        or not(exists(cac:PaymentMeans[cbc:PaymentMeansCode = '42']))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[IS-R-007]-If seller is icelandic and payment means code is 42 then a 12 digit account id must exist  — Ef seljandi er íslenskur og greiðslumáti (BT-81) er millifærsla (kóti 42) þá skal koma fram 12 stafa reikningnúmer (BT-84)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not((exists(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']) and string-length(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']/cbc:ID) = 10 and (string(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']/cbc:ID) castable as xs:date)) or not(exists(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI'])))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="IS-R-008" test="(exists(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']) and string-length(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']/cbc:ID) = 10 and (string(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']/cbc:ID) castable as xs:date)) or not(exists(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[IS-R-008]-If seller is icelandic and invoice contains supporting description EINDAGI then the id form must be YYYY-MM-DD — Ef seljandi er íslenskur þá skal eindagi (BT-122, DocumentDescription = EINDAGI) vera á forminu YYYY-MM-DD.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not((exists(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']) and exists(cbc:DueDate)) or not(exists(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI'])))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="IS-R-009" test="(exists(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']) and exists(cbc:DueDate)) or not(exists(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[IS-R-009]-If seller is icelandic and invoice contains supporting description EINDAGI invoice must have due date — Ef seljandi er íslenskur þá skal reikningur sem inniheldur eindaga (BT-122, DocumentDescription = EINDAGI) einnig hafa gjalddaga (BT-9).</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not((exists(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']) and (cbc:DueDate) &lt;= (cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']/cbc:ID)) or not(exists(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI'])))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="IS-R-010" test="(exists(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']) and (cbc:DueDate) &lt;= (cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']/cbc:ID)) or not(exists(cac:AdditionalDocumentReference[cbc:DocumentDescription = 'EINDAGI']))" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[IS-R-010]-If seller is icelandic and invoice contains supporting description EINDAGI the id date must be same or later than due date — Ef seljandi er íslenskur þá skal eindagi (BT-122, DocumentDescription = EINDAGI) skal vera sami eða síðar en gjalddagi (BT-9) ef eindagi er til staðar.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e744', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="ubl-creditnote:CreditNote[$SupplierCountry = 'IS' and $CustomerCountry = 'IS']/cac:AccountingCustomerParty | ubl-invoice:Invoice[$SupplierCountry = 'IS' and $CustomerCountry = 'IS']/cac:AccountingCustomerParty" mode="group.d2e163" priority="26"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e744' = $schxslt:pattern"><svrl:suppressed-rule context="ubl-creditnote:CreditNote[$SupplierCountry = 'IS' and $CustomerCountry = 'IS']/cac:AccountingCustomerParty | ubl-invoice:Invoice[$SupplierCountry = 'IS' and $CustomerCountry = 'IS']/cac:AccountingCustomerParty"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="ubl-creditnote:CreditNote[$SupplierCountry = 'IS' and $CustomerCountry = 'IS']/cac:AccountingCustomerParty | ubl-invoice:Invoice[$SupplierCountry = 'IS' and $CustomerCountry = 'IS']/cac:AccountingCustomerParty"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(exists(cac:Party/cac:PartyLegalEntity/cbc:CompanyID) and cac:Party/cac:PartyLegalEntity/cbc:CompanyID/@schemeID = '0196')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="IS-R-004" test="exists(cac:Party/cac:PartyLegalEntity/cbc:CompanyID) and cac:Party/cac:PartyLegalEntity/cbc:CompanyID/@schemeID = '0196'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[IS-R-004]-If seller and buyer are icelandic then the invoice shall contain the buyers icelandic legal identifier — Ef seljandi og kaupandi eru íslenskir þá skal reikningurinn innihalda íslenska kennitölu kaupanda (BT-47).</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:if test="not(exists(cac:Party/cac:PostalAddress/cbc:StreetName) and exists(cac:Party/cac:PostalAddress/cbc:PostalZone))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="IS-R-005" test="exists(cac:Party/cac:PostalAddress/cbc:StreetName) and exists(cac:Party/cac:PostalAddress/cbc:PostalZone)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[IS-R-005]-If seller and buyer are icelandic then the invoice shall contain the buyers address with street name and zip code  — Ef seljandi og kaupandi eru íslenskir þá skal heimilisfang kaupanda innihalda götuheiti og póstnúmer (BT-50 og BT-53)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e744', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:CreditNoteTypeCode[$supplierCountryIsNL]" mode="group.d2e163" priority="25"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e790' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:CreditNoteTypeCode[$supplierCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:CreditNoteTypeCode[$supplierCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(/*/cac:BillingReference/cac:InvoiceDocumentReference/cbc:ID)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="NL-R-001" test="/*/cac:BillingReference/cac:InvoiceDocumentReference/cbc:ID" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[NL-R-001] For suppliers in the Netherlands, if the document is a creditnote, the document MUST contain an invoice reference (cac:BillingReference/cac:InvoiceDocumentReference/cbc:ID)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e790', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingSupplierParty/cac:Party/cac:PostalAddress[$supplierCountryIsNL]" mode="group.d2e163" priority="24"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e790' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingSupplierParty/cac:Party/cac:PostalAddress[$supplierCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingSupplierParty/cac:Party/cac:PostalAddress[$supplierCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(cbc:StreetName and cbc:CityName and cbc:PostalZone)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="NL-R-002" test="cbc:StreetName and cbc:CityName and cbc:PostalZone" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[NL-R-002] For suppliers in the Netherlands the supplier's address (cac:AccountingSupplierParty/cac:Party/cac:PostalAddress) MUST contain street name (cbc:StreetName), city (cbc:CityName) and post code (cbc:PostalZone)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e790', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID[$supplierCountryIsNL]" mode="group.d2e163" priority="23"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e790' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID[$supplierCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingSupplierParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID[$supplierCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not((contains(concat(' ', string-join(@schemeID, ' '), ' '), ' 0106 ') or contains(concat(' ', string-join(@schemeID, ' '), ' '), ' 0190 ')) and (normalize-space(.) != ''))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="NL-R-003" test="(contains(concat(' ', string-join(@schemeID, ' '), ' '), ' 0106 ') or contains(concat(' ', string-join(@schemeID, ' '), ' '), ' 0190 ')) and (normalize-space(.) != '')" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[NL-R-003] For suppliers in the Netherlands, the legal entity identifier MUST be either a KVK or OIN number (schemeID 0106 or 0190)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e790', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingCustomerParty/cac:Party/cac:PostalAddress[$supplierCountryIsNL and $customerCountryIsNL]" mode="group.d2e163" priority="22"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e790' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingCustomerParty/cac:Party/cac:PostalAddress[$supplierCountryIsNL and $customerCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingCustomerParty/cac:Party/cac:PostalAddress[$supplierCountryIsNL and $customerCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(cbc:StreetName and cbc:CityName and cbc:PostalZone)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="NL-R-004" test="cbc:StreetName and cbc:CityName and cbc:PostalZone" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[NL-R-004] For suppliers in the Netherlands, if the customer is in the Netherlands, the customer address (cac:AccountingCustomerParty/cac:Party/cac:PostalAddress) MUST contain the street name (cbc:StreetName), the city (cbc:CityName) and post code (cbc:PostalZone)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e790', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AccountingCustomerParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID[$supplierCountryIsNL and $customerCountryIsNL]" mode="group.d2e163" priority="21"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e790' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AccountingCustomerParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID[$supplierCountryIsNL and $customerCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AccountingCustomerParty/cac:Party/cac:PartyLegalEntity/cbc:CompanyID[$supplierCountryIsNL and $customerCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not((contains(concat(' ', string-join(@schemeID, ' '), ' '), ' 0106 ') or contains(concat(' ', string-join(@schemeID, ' '), ' '), ' 0190 ')) and (normalize-space(.) != ''))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="NL-R-005" test="(contains(concat(' ', string-join(@schemeID, ' '), ' '), ' 0106 ') or contains(concat(' ', string-join(@schemeID, ' '), ' '), ' 0190 ')) and (normalize-space(.) != '')" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[NL-R-005] For suppliers in the Netherlands, if the customer is in the Netherlands, the customer's legal entity identifier MUST be either a KVK or OIN number (schemeID 0106 or 0190)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e790', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:TaxRepresentativeParty/cac:PostalAddress[$supplierCountryIsNL and $taxRepresentativeCountryIsNL]" mode="group.d2e163" priority="20"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e790' = $schxslt:pattern"><svrl:suppressed-rule context="cac:TaxRepresentativeParty/cac:PostalAddress[$supplierCountryIsNL and $taxRepresentativeCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:TaxRepresentativeParty/cac:PostalAddress[$supplierCountryIsNL and $taxRepresentativeCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(cbc:StreetName and cbc:CityName and cbc:PostalZone)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="NL-R-006" test="cbc:StreetName and cbc:CityName and cbc:PostalZone" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[NL-R-006] For suppliers in the Netherlands, if the fiscal representative is in the Netherlands, the representative's address (cac:TaxRepresentativeParty/cac:PostalAddress) MUST contain street name (cbc:StreetName), city (cbc:CityName) and post code (cbc:PostalZone)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e790', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:LegalMonetaryTotal[$supplierCountryIsNL]" mode="group.d2e163" priority="19"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e790' = $schxslt:pattern"><svrl:suppressed-rule context="cac:LegalMonetaryTotal[$supplierCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:LegalMonetaryTotal[$supplierCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(xs:decimal(cbc:PayableAmount) &lt;= 0.0 or (//cac:PaymentMeans))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="NL-R-007" test="xs:decimal(cbc:PayableAmount) &lt;= 0.0 or (//cac:PaymentMeans)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[NL-R-007] For suppliers in the Netherlands, the supplier MUST provide a means of payment (cac:PaymentMeans) if the payment is from customer to supplier</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e790', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:PaymentMeans[$supplierCountryIsNL]" mode="group.d2e163" priority="18"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e790' = $schxslt:pattern"><svrl:suppressed-rule context="cac:PaymentMeans[$supplierCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:PaymentMeans[$supplierCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(normalize-space(cbc:PaymentMeansCode) = '30' or         normalize-space(cbc:PaymentMeansCode) = '48' or         normalize-space(cbc:PaymentMeansCode) = '49' or         normalize-space(cbc:PaymentMeansCode) = '57' or         normalize-space(cbc:PaymentMeansCode) = '58' or         normalize-space(cbc:PaymentMeansCode) = '59')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="NL-R-008" test="normalize-space(cbc:PaymentMeansCode) = '30' or         normalize-space(cbc:PaymentMeansCode) = '48' or         normalize-space(cbc:PaymentMeansCode) = '49' or         normalize-space(cbc:PaymentMeansCode) = '57' or         normalize-space(cbc:PaymentMeansCode) = '58' or         normalize-space(cbc:PaymentMeansCode) = '59'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[NL-R-008] For suppliers in the Netherlands, the payment means code (cac:PaymentMeans/cbc:PaymentMeansCode) MUST be one of 30, 48, 49, 57, 58 or 59</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e790', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:OrderLineReference/cbc:LineID[$supplierCountryIsNL]" mode="group.d2e163" priority="17"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e790' = $schxslt:pattern"><svrl:suppressed-rule context="cac:OrderLineReference/cbc:LineID[$supplierCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:OrderLineReference/cbc:LineID[$supplierCountryIsNL]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(exists(/*/cac:OrderReference/cbc:ID))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="NL-R-009" test="exists(/*/cac:OrderReference/cbc:ID)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>[NL-R-009] For suppliers in the Netherlands, if an order line reference (cac:OrderLineReference/cbc:LineID) is used, there must be an order reference on the document level (cac:OrderReference/cbc:ID)</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e790', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:EmbeddedDocumentBinaryObject[@mimeCode]" mode="group.d2e163" priority="16"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:EmbeddedDocumentBinaryObject[@mimeCode]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:EmbeddedDocumentBinaryObject[@mimeCode]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(           some $code in $MIMECODE             satisfies @mimeCode = $code)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-CL001" test="           some $code in $MIMECODE             satisfies @mimeCode = $code" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Mime code must be according to subset of IANA code list.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AllowanceCharge[cbc:ChargeIndicator = 'false']/cbc:AllowanceChargeReasonCode" mode="group.d2e163" priority="15"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AllowanceCharge[cbc:ChargeIndicator = 'false']/cbc:AllowanceChargeReasonCode"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AllowanceCharge[cbc:ChargeIndicator = 'false']/cbc:AllowanceChargeReasonCode"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(           some $code in $UNCL5189             satisfies normalize-space(text()) = $code)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-CL002" test="           some $code in $UNCL5189             satisfies normalize-space(text()) = $code" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Reason code MUST be according to subset of UNCL 5189 D.16B.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:AllowanceCharge[cbc:ChargeIndicator = 'true']/cbc:AllowanceChargeReasonCode" mode="group.d2e163" priority="14"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cac:AllowanceCharge[cbc:ChargeIndicator = 'true']/cbc:AllowanceChargeReasonCode"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:AllowanceCharge[cbc:ChargeIndicator = 'true']/cbc:AllowanceChargeReasonCode"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(           some $code in $UNCL7161             satisfies normalize-space(text()) = $code)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-CL003" test="           some $code in $UNCL7161             satisfies normalize-space(text()) = $code" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Reason code MUST be according to UNCL 7161 D.16B.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:InvoicePeriod/cbc:DescriptionCode" mode="group.d2e163" priority="13"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cac:InvoicePeriod/cbc:DescriptionCode"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:InvoicePeriod/cbc:DescriptionCode"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(           some $code in $UNCL2005             satisfies normalize-space(text()) = $code)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-CL006" test="           some $code in $UNCL2005             satisfies normalize-space(text()) = $code" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Invoice period description code must be according to UNCL 2005 D.16B.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount" mode="group.d2e163" priority="12"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:Amount | cbc:BaseAmount | cbc:PriceAmount | cbc:TaxAmount | cbc:TaxableAmount | cbc:LineExtensionAmount | cbc:TaxExclusiveAmount | cbc:TaxInclusiveAmount | cbc:AllowanceTotalAmount | cbc:ChargeTotalAmount | cbc:PrepaidAmount | cbc:PayableRoundingAmount | cbc:PayableAmount"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(           some $code in $ISO4217             satisfies @currencyID = $code)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-CL007" test="           some $code in $ISO4217             satisfies @currencyID = $code" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Currency code must be according to ISO 4217:2005</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:InvoiceTypeCode" mode="group.d2e163" priority="11"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:InvoiceTypeCode"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:InvoiceTypeCode"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(           $profile != '01' or (some $code in tokenize('71 80 82 84 102 218 219 331 380 382 383 386 388 393 395 553 575 623 780 817 870 875 876 877', '\s')             satisfies normalize-space(text()) = $code))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-P0100" test="           $profile != '01' or (some $code in tokenize('71 80 82 84 102 218 219 331 380 382 383 386 388 393 395 553 575 623 780 817 870 875 876 877', '\s')             satisfies normalize-space(text()) = $code)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Invoice type code MUST be set according to the profile.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:CreditNoteTypeCode" mode="group.d2e163" priority="10"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:CreditNoteTypeCode"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:CreditNoteTypeCode"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(           $profile != '01' or (some $code in tokenize('381 396 81 83 532', '\s')             satisfies normalize-space(text()) = $code))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-P0101" test="           $profile != '01' or (some $code in tokenize('381 396 81 83 532', '\s')             satisfies normalize-space(text()) = $code)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Credit note type code MUST be set according to the profile.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:IssueDate | cbc:DueDate | cbc:TaxPointDate | cbc:StartDate | cbc:EndDate | cbc:ActualDeliveryDate" mode="group.d2e163" priority="9"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:IssueDate | cbc:DueDate | cbc:TaxPointDate | cbc:StartDate | cbc:EndDate | cbc:ActualDeliveryDate"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:IssueDate | cbc:DueDate | cbc:TaxPointDate | cbc:StartDate | cbc:EndDate | cbc:ActualDeliveryDate"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(string-length(text()) = 10 and (string(.) castable as xs:date))"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-F001" test="string-length(text()) = 10 and (string(.) castable as xs:date)" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>A date
        MUST be formatted YYYY-MM-DD.</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cbc:EndpointID[@schemeID]" mode="group.d2e163" priority="8"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cbc:EndpointID[@schemeID]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cbc:EndpointID[@schemeID]"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(         some $code in $eaid         satisfies @schemeID = $code)"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-CL008" test="         some $code in $eaid         satisfies @schemeID = $code" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Electronic address identifier scheme must be from the codelist "Electronic Address Identifier Scheme"</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-G']" mode="group.d2e163" priority="7"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-G']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-G']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(normalize-space(cbc:ID)='G')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-P0104" test="normalize-space(cbc:ID)='G'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Tax Category G MUST be used when exemption reason code is VATEX-EU-G</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-O']" mode="group.d2e163" priority="6"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-O']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-O']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(normalize-space(cbc:ID)='O')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-P0105" test="normalize-space(cbc:ID)='O'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Tax Category O MUST be used when exemption reason code is VATEX-EU-O</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-IC']" mode="group.d2e163" priority="5"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-IC']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-IC']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(normalize-space(cbc:ID)='K')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-P0106" test="normalize-space(cbc:ID)='K'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Tax Category K MUST be used when exemption reason code is VATEX-EU-IC</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-AE']" mode="group.d2e163" priority="4"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-AE']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-AE']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(normalize-space(cbc:ID)='AE')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-P0107" test="normalize-space(cbc:ID)='AE'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Tax Category AE MUST be used when exemption reason code is VATEX-EU-AE</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-D']" mode="group.d2e163" priority="3"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-D']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-D']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(normalize-space(cbc:ID)='E')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-P0108" test="normalize-space(cbc:ID)='E'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Tax Category E MUST be used when exemption reason code is VATEX-EU-D</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-F']" mode="group.d2e163" priority="2"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-F']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-F']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(normalize-space(cbc:ID)='E')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-P0109" test="normalize-space(cbc:ID)='E'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Tax Category E MUST be used when exemption reason code is VATEX-EU-F</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-I']" mode="group.d2e163" priority="1"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-I']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-I']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(normalize-space(cbc:ID)='E')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-P0110" test="normalize-space(cbc:ID)='E'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Tax Category E MUST be used when exemption reason code is VATEX-EU-I</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template xmlns="http://purl.oclc.org/dsdl/schematron" match="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-J']" mode="group.d2e163" priority="0"><xsl:param name="schxslt:pattern" as="xs:string*" select="()"/><xsl:choose><xsl:when test="'d2e876' = $schxslt:pattern"><svrl:suppressed-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-J']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:suppressed-rule><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="$schxslt:pattern"/></xsl:next-match></xsl:when><xsl:otherwise><svrl:fired-rule context="cac:TaxCategory[upper-case(cbc:TaxExemptionReasonCode)='VATEX-EU-J']"><xsl:if test="document-uri()"><xsl:attribute name="document" select="document-uri()"/></xsl:if></svrl:fired-rule><xsl:if test="not(normalize-space(cbc:ID)='E')"><xsl:variable name="failed-assert" as="element(svrl:failed-assert)"><svrl:failed-assert flag="fatal" id="PEPPOL-EN16931-P0111" test="normalize-space(cbc:ID)='E'" xml:lang=""><xsl:attribute name="location" select="path(.)"/><svrl:text>Tax Category E MUST be used when exemption reason code is VATEX-EU-J</svrl:text></svrl:failed-assert></xsl:variable><xsl:sequence select="$failed-assert"/></xsl:if><xsl:next-match><xsl:with-param name="schxslt:pattern" as="xs:string*" select="('d2e876', $schxslt:pattern)"/></xsl:next-match></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="root()" as="element(svrl:schematron-output)"><svrl:schematron-output schemaVersion="iso" phase="#ALL"><svrl:ns-prefix-in-attribute-values prefix="cbc" uri="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2"/><svrl:ns-prefix-in-attribute-values prefix="cac" uri="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2"/><svrl:ns-prefix-in-attribute-values prefix="ubl-creditnote" uri="urn:oasis:names:specification:ubl:schema:xsd:CreditNote-2"/><svrl:ns-prefix-in-attribute-values prefix="ubl-invoice" uri="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2"/><svrl:ns-prefix-in-attribute-values prefix="xs" uri="http://www.w3.org/2001/XMLSchema"/><svrl:ns-prefix-in-attribute-values prefix="u" uri="utils"/><!--SchXslt2 Core 1.1--><svrl:active-pattern><xsl:attribute name="documents" select="document-uri(.)"/></svrl:active-pattern><svrl:active-pattern><xsl:attribute name="documents" select="document-uri(.)"/></svrl:active-pattern><svrl:active-pattern><xsl:attribute name="documents" select="document-uri(.)"/></svrl:active-pattern><svrl:active-pattern><xsl:attribute name="documents" select="document-uri(.)"/></svrl:active-pattern><svrl:active-pattern><xsl:attribute name="documents" select="document-uri(.)"/></svrl:active-pattern><svrl:active-pattern><xsl:attribute name="documents" select="document-uri(.)"/></svrl:active-pattern><svrl:active-pattern><xsl:attribute name="documents" select="document-uri(.)"/></svrl:active-pattern><svrl:active-pattern><xsl:attribute name="documents" select="document-uri(.)"/></svrl:active-pattern><svrl:active-pattern><xsl:attribute name="documents" select="document-uri(.)"/></svrl:active-pattern><svrl:active-pattern><xsl:attribute name="documents" select="document-uri(.)"/></svrl:active-pattern><svrl:active-pattern><xsl:attribute name="documents" select="document-uri(.)"/></svrl:active-pattern><svrl:active-pattern><xsl:attribute name="documents" select="document-uri(.)"/></svrl:active-pattern><xsl:apply-templates select="." mode="group.d2e163"/></svrl:schematron-output></xsl:template></xsl:stylesheet>
